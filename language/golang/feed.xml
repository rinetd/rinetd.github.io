<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>时光小栈</title>
    <link>/language/golang/</link>
    <description>Recent content on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 26 Oct 2019 11:05:23 +0800</lastBuildDate>
    
	<atom:link href="/language/golang/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go http</title>
      <link>/language/golang/go-http/</link>
      <pubDate>Sat, 26 Oct 2019 11:05:23 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http/</guid>
      <description>Golang提供了官方的http包，对于http操作非常的方便和简洁。 但是不同于PHP，使用Golang的包来做http操作，还是没有那么”</description>
    </item>
    
    <item>
      <title>go http roundtrip</title>
      <link>/language/golang/go-http-roundtrip/</link>
      <pubDate>Fri, 25 Oct 2019 18:59:47 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-roundtrip/</guid>
      <description>Golang http.RoundTripper 笔记 [](https://segmentfault.com/a/1190000016153599) golang 818 次阅读 · 读完需要 15 分钟 7__ __ __ __ __ __ RoundTripper is an interface representing the ability to execute a single HTTP transaction, obtaining the Response for a given Request. 对于http客户端，可以使用不同的实现了 RoundTripper 接口的Tr</description>
    </item>
    
    <item>
      <title>go blog</title>
      <link>/language/golang/go-blog/</link>
      <pubDate>Tue, 22 Oct 2019 18:08:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-blog/</guid>
      <description>cch123/golang-notes</description>
    </item>
    
    <item>
      <title>go http form file</title>
      <link>/language/golang/go-http-form-file/</link>
      <pubDate>Tue, 22 Oct 2019 10:22:25 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-form-file/</guid>
      <description>golang http client如何上传和server如何接收文件 - 简书 文件上传时 增加额外的属性 curl -F“image”= @“IMAGEFILE “-F”key“</description>
    </item>
    
    <item>
      <title>go dahua</title>
      <link>/language/golang/go-dahua/</link>
      <pubDate>Mon, 30 Sep 2019 15:28:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-dahua/</guid>
      <description>Send Dahua IPC events to MQTT https://github.com/drblez/dahuaevents2mqtt https://github.com/Robert-Arciszewski/Python/blob/master/PyCamFinder.py https://github.com/nailgun/dahua-nvr/blob/master/nvr.py https://github.com/nocproject/noc/blob/master/sa/profiles/Dahua/DH/middleware/dahuaauth.py https://github.com/SaWey/home-assistant-dahua-event/blob/master/dahua_event.py https://github.com/jpfielding/gorets/blob/master/pkg/rets/digest.go https://github.com/sergle/mlab-ns2/blob/master/gae/ns/digest/digest.go test 重要 http://admin:huawei777@192.168.0.108/cgi-bin/eventManager.cgi?action=attach&amp;amp;codes=[AlarmLocal,VideoMotion,VideoLoss,VideoBlind] https://github.com/magtimmermans/com.cyclone-software.dahuacam/blob/master/drivers/DahuaCamera/dahuacambase.js curl --digest -s -u &#39;admin:huawei777&#39; &#39;http://192.168.0.108/cgi-bin/magicBox.cgi?action=getMachineName&#39; name=5E0120EPAG7A5BF curl --digest -s -u &#39;admin:huawei777&#39; &#39;http://192.168.0.108/cgi-bin/eventManager.cgi?action=attach&amp;amp;codes=[AlarmLocal,VideoMotion,VideoLoss,VideoBlind]&#39; ｄigest 不以明文发送密码，在上述第2步时服务器响应返回随机字符串nonce</description>
    </item>
    
    <item>
      <title>go cgo intro</title>
      <link>/language/golang/cgo/go-cgo-intro/</link>
      <pubDate>Thu, 23 May 2019 18:34:11 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-intro/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://studygolang.com/articles/2629 前提条件： 了解 Go 语言和 C 语言的基本知识和基本用法。 一、什么是 cgo 简单地说，cgo 是在 Go 语言中使用 C 语言代码的一种方</description>
    </item>
    
    <item>
      <title>go cgo string</title>
      <link>/language/golang/cgo/go-cgo-string/</link>
      <pubDate>Thu, 23 May 2019 16:26:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-string/</guid>
      <description>package cgoutil /* #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; static char** make_str_array(int size) { return calloc(sizeof(char*), size); } static int len_str_array(char **arr) { int i = 0; while (arr[i] != NULL) i++; return i+1; // NULL does count } static void set_str_array(char **arr, int idx, char *s) { arr[idx] = s; } static void free_str_array(char **arr, int size) { int i; for (i = 0; i &amp;lt; size; i++) { free(arr[i]); } free(arr); } */ import &amp;quot;C&amp;quot; import ( &amp;quot;unsafe&amp;quot; ) // CStringArray represents an array of pointers to NULL terminated C strings, // the array itself is terminated with a NULL type CStringArray struct { Pointer unsafe.</description>
    </item>
    
    <item>
      <title>go cgo qsort</title>
      <link>/language/golang/cgo/go-cgo-qsort/</link>
      <pubDate>Wed, 22 May 2019 18:17:05 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-qsort/</guid>
      <description>2.6 实战: 封装qsort qsort快速排序函数是C语言的高阶函数，支持用于自定义排序比较函数，可以对任意类型的数组进行排序。本节我们尝试基于C</description>
    </item>
    
    <item>
      <title>golang中cgo中文说明</title>
      <link>/language/golang/cgo/golang-cgo/</link>
      <pubDate>Wed, 22 May 2019 14:14:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/golang-cgo/</guid>
      <description>cgo 使用带有go命令的cgo Go调用C的函数 C引用Go的函数 指针传递的实现 特别案例 直接使用cgo Cgo支持创建调用C代码的Go包。 1. 使用带有g</description>
    </item>
    
    <item>
      <title>go cgo acc</title>
      <link>/language/golang/cgo/go-cgo-acc/</link>
      <pubDate>Wed, 22 May 2019 13:57:52 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-acc/</guid>
      <description>CGO可以让golang和c互相调用，譬如x264或者aac编解码，用go再实现一遍比较麻烦，直接调用c的函数会更合适。 CGO可以直接用C的</description>
    </item>
    
    <item>
      <title>go cgo struct</title>
      <link>/language/golang/cgo/go-cgo-struct/</link>
      <pubDate>Wed, 22 May 2019 11:52:54 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-struct/</guid>
      <description>对于CGO来说，方式 typedef struct libfacedetection_capi_face_t libfacedetection_capi_face_t; typedef struct libfacedetection_capi_result_t libfacedetection_capi_result_t; struct libfacedetection_capi_face_t { int x; int y; int w; int h; int neighbors; int angle; }; 现代所有主流操作系统几乎都是用 C 语音实现的，几乎所有高级语言都能调用 C 语</description>
    </item>
    
    <item>
      <title>go cgo gc</title>
      <link>/language/golang/cgo/go-cgo-gc/</link>
      <pubDate>Wed, 22 May 2019 11:48:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-gc/</guid>
      <description>cgo调用内存泄露：C.GostringN()生成的string不会被GC? package main /* #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;malloc.h&amp;gt; void mal(char **p) { int l = 1000000; *p= (char *)malloc(l); *(*p+l-2) = &#39;a&#39;; *(*p+l-1) = &#39;b&#39;; } */ import &amp;quot;C&amp;quot; import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot;</description>
    </item>
    
    <item>
      <title>Golang 中通过 cgo 调用  C&#43;&#43; 的动态库的功能封装</title>
      <link>/language/golang/cgo/go-cgo-extend/</link>
      <pubDate>Wed, 22 May 2019 11:46:43 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-extend/</guid>
      <description>将C++warpper 文件写在go中 https://github.com/winlinvip/go-fdkaac/blob/master/fdkaac/dec.go https://github.com/giorgisio/goav/blob/master/avfilter/avfilter.go 原文地址 http://yangxikun.com/golang/2018/03/09/golang-cgo.html Examples of calls between Go and C/C++ Golang 中通过 cgo 调用 C++ 的动态库的功能封装 下面将通过一个示例程序，演示如何在 Golang 中通过</description>
    </item>
    
    <item>
      <title>go cgo skill</title>
      <link>/language/golang/cgo/go-cgo-skill/</link>
      <pubDate>Wed, 22 May 2019 11:37:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-skill/</guid>
      <description>// int EC60789803D1(const char *CompanyTag, char *dataIn, int inlen, unsigned char *dataout, int outlen); // Encrypt { var byteOutBuffer []byte byteOutBuffer = make( []byte, 2048 ) var outlen int = 2048 var strKey string strKey = &amp;quot;test&amp;quot; var inString string inString = &amp;quot;fdsafdsafdsa&amp;quot; fmt.Println( &amp;quot;inlen=&amp;quot;, len(inString) ) InKey := C.CString( strKey ) InData := C.CString( inString ) InInLen := C.int( len(inString) ) InOut := (*C.uchar)( &amp;amp;byteOutBuffer[0] ) InOutLen := C.int(</description>
    </item>
    
    <item>
      <title>go cgo</title>
      <link>/language/golang/go-cgo/</link>
      <pubDate>Wed, 22 May 2019 10:28:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-cgo/</guid>
      <description>Go语言高级编程(Advanced Go Programming)第2章 CGO编程 鸟窝 CGO 文章整理 (...) cgo的指针传递 - 敦刻尔克的小兵 - SegmentFault 思否 https://github.com/chai2010/advanced-go-programming-book/tree/master/ch2-cgo 第二章</description>
    </item>
    
    <item>
      <title>go binary</title>
      <link>/language/golang/go-binary/</link>
      <pubDate>Wed, 15 May 2019 11:27:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-binary/</guid>
      <description>注意 binary 包时，必须使用明确的长度确定的类型，可以用 (bool, int8, uint8, int16, float32, complex64, …) 但是不能用 int 有如下 go 代码： const ( foo = 123 ) buffer := new(bytes.Buffer) binary.Write(buffer, binary.BigEndian, foo) fmt.Println(buffer.Len()) 输出结果是 0，foo 没有</description>
    </item>
    
    <item>
      <title>go bufio</title>
      <link>/language/golang/go-bufio/</link>
      <pubDate>Tue, 14 May 2019 15:07:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-bufio/</guid>
      <description>bufio bufio是在处理各种 I/O 的时候常用的包之一，他实现了各种带缓冲的 I/O。其中有两个和输入有关的结构： Reader Scanner 下面来看一下这两货怎么玩. Reader Rea</description>
    </item>
    
    <item>
      <title>go Packet tcp粘包</title>
      <link>/language/golang/go-packet-tcp%E7%B2%98%E5%8C%85/</link>
      <pubDate>Fri, 26 Apr 2019 17:39:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-packet-tcp%E7%B2%98%E5%8C%85/</guid>
      <description>使用bufio处理TCP粘包问题 golang网络socket粘包问题的解决方法 首先说一下什么是粘包：百度上比较通俗的说法是指TCP协议中，发</description>
    </item>
    
    <item>
      <title>go struct</title>
      <link>/language/golang/go-struct/</link>
      <pubDate>Thu, 25 Apr 2019 17:21:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-struct/</guid>
      <description>空结构体struct{}解析 - 云+社区 - 腾讯云 Introduction 这篇文章详细介绍了我最喜欢的 Go 数据类型，空结构体 --struct{}。 空结构体是没有位段的结</description>
    </item>
    
    <item>
      <title>go atomic.value并发安全的另一种玩法</title>
      <link>/language/golang/go-atomic-value/</link>
      <pubDate>Tue, 23 Apr 2019 08:57:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-atomic-value/</guid>
      <description>atomic · Go语言学习笔记 使用atomic.Value的Golang无锁值 不使用锁来保证Golang的并发安全 - nsq 源码 从go1.4开始，标准库提供</description>
    </item>
    
    <item>
      <title>go benchmark</title>
      <link>/language/golang/go-benchmark/</link>
      <pubDate>Mon, 22 Apr 2019 15:46:05 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-benchmark/</guid>
      <description>Practical Go Benchmarks - StackImpact
This collection of practical performance benchmarks of Go packages and algorithms aims to help developers write fast and efficient programs.
The following benchmarks evaluate various functionalities with a focus on the usability of benchmark results. Environment: Go 1.10, Linux, Intel® Core™ i7-4770HQ CPU @ 2.20GHz.
 String Concatenation
 Numeric Conversions
 Regular Expressions
 Sorting
 Random Numbers
 Random Strings
 Slice Appending</description>
    </item>
    
    <item>
      <title>go uuid snowflake</title>
      <link>/language/golang/go-uuid-snowflake/</link>
      <pubDate>Mon, 22 Apr 2019 15:31:11 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-uuid-snowflake/</guid>
      <description>生成随机数 rand.Int31() [分布式唯一ID极简教程]()</description>
    </item>
    
    <item>
      <title>go errors</title>
      <link>/language/golang/go-errors/</link>
      <pubDate>Fri, 22 Mar 2019 16:02:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-errors/</guid>
      <description>Go语言中的错误处理（Error Handling in Go） 更优雅的 Golang 错误处理 使用“隐藏内部细节的错误处理” 使用errors.Wrap封装原始error 使用e</description>
    </item>
    
    <item>
      <title>go http client</title>
      <link>/language/golang/go-http-client/</link>
      <pubDate>Fri, 22 Mar 2019 13:46:29 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-client/</guid>
      <description>net/http 与 TIME_WAIT golang http client 连接池 http.DefaultTransport.(http.Transport).MaxIdleConnsPerHost = 1000 http.DefaultTransport.(http.Transport).MaxIdleConns = 1000 var netTransport = &amp;amp;http.Transport{ Dial: (&amp;amp;net.Dialer{ Timeout: 10 * time.Second, KeepAlive: 30 * time.Second, }).Dial, TLSHandshakeTimeout: 5 * time.Second, ResponseHeaderTimeout: 10 * time.Second, ExpectContinueTimeout: 1 * time.Second, } var netClient = &amp;amp;http.Client{ Timeout: time.Second * 30, Transport: netTransport, } // get response, _ := netClient.Get(&amp;quot;http://www.golangnote.com/&amp;quot;) defer response.Body.Close() if response.StatusCode == 200 { body, _ :=</description>
    </item>
    
    <item>
      <title>go http handle</title>
      <link>/language/golang/go-http-handle/</link>
      <pubDate>Wed, 20 Mar 2019 19:40:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-handle/</guid>
      <description>Golang构建HTTP服务（二）--- Handler，ServeMux与中间件 - 简书 打印所有的Header func helloFunc(w http.ResponseWriter, r *http.Request) { fmt.Printl</description>
    </item>
    
    <item>
      <title>Golang停止Ticker的那些坑</title>
      <link>/language/golang/go-time-tick/</link>
      <pubDate>Wed, 20 Mar 2019 18:55:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-time-tick/</guid>
      <description>golang-notes/timer.md at master · cch123/golang-notes Golang如何正确的停止Ticker - 我的天空 我的梦 - CSDN博客 timer.NewTimer()会启动一个新的Timer实例，</description>
    </item>
    
    <item>
      <title>深入理解 Golang HTTP Timeout</title>
      <link>/language/golang/go-http-timout/</link>
      <pubDate>Thu, 14 Mar 2019 10:07:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-timout/</guid>
      <description>Go实现超时是基于 Deadline (最后期限) Deadline是一个绝对时间值,当到达这个时间的时候，所有的 I/O 操作都会失败，返回超时(timeout)错误</description>
    </item>
    
    <item>
      <title>golang中的局部敏感哈希介绍</title>
      <link>/language/golang/go-hash/</link>
      <pubDate>Tue, 05 Mar 2019 17:45:16 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-hash/</guid>
      <description>String similarity https://github.com/rfguri/bowsim 传统的 Hash 当源数据有些许的变化的时候生成的哈希值差异也非常的大， 比如： 12345678910 func main() { s1 := []byte(&amp;quot;你好世界&amp;quot;) s2 := [</description>
    </item>
    
    <item>
      <title>go gui</title>
      <link>/language/golang/go-gui/</link>
      <pubDate>Fri, 15 Feb 2019 09:06:51 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gui/</guid>
      <description>https://github.com/topics/gui?l=go</description>
    </item>
    
    <item>
      <title>OpenSSL AES 算法中 Key 和 IV 是如何生成的？</title>
      <link>/language/golang/go-crypto-aes-cbc/</link>
      <pubDate>Thu, 14 Feb 2019 14:24:46 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-crypto-aes-cbc/</guid>
      <description>OpenSSL AES 算法中 Key 和 IV 是如何生成的？ - 简书 书接上回。在《LDAP 密码加密方式初探》一文中，使用 OpenSSL 命令 AES 算法加密解密时，都用到了 Key 和 IV 参数，那么这两</description>
    </item>
    
    <item>
      <title>hex和base32和base64的区别与联系</title>
      <link>/language/golang/go-hex-base64/</link>
      <pubDate>Thu, 14 Feb 2019 08:56:13 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-hex-base64/</guid>
      <description>ASCII 是用128（2的8次方）个字符，对二进制数据进行编码的方式 base64编码是用64（2的6次方）个字符，对二进制数据进行编码的方式 base</description>
    </item>
    
    <item>
      <title>go使用gcm进行AES加密</title>
      <link>/language/golang/go-aes-gcm/</link>
      <pubDate>Wed, 13 Feb 2019 18:58:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-aes-gcm/</guid>
      <description>高级加密和解密 Go语言在其crypto包中支持对称加密算法。 如果您不知道自己在做什么，请不要在GCM模式下使用除AES之外的任何内容！ cry</description>
    </item>
    
    <item>
      <title>go file dir walk</title>
      <link>/language/golang/go-file-dir-walk/</link>
      <pubDate>Wed, 13 Feb 2019 13:45:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-file-dir-walk/</guid>
      <description>递归遍历 // We use a counting semaphore to limit // the number of parallel calls to ReadDir. sema := make(chan bool, 20) func allPackages(ctxt *build.Context, sema chan bool, root string, ch chan&amp;lt;- item) { root = filepath.Clean(root) + string(os.PathSeparator) var wg sync.WaitGroup var walkDir func(dir string) walkDir = func(dir string) { // Avoid .foo, _foo, and testdata directory trees. base := filepath.Base(dir) if base == &amp;quot;&amp;quot; ||</description>
    </item>
    
    <item>
      <title>go uuid</title>
      <link>/language/golang/go-uuid/</link>
      <pubDate>Tue, 12 Feb 2019 17:14:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-uuid/</guid>
      <description>UUID 在分布式系统中的常用技术 毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。 针对 ID是否可预测 有序 无序 Snowflake 时钟回拨 下表是生成uuid 库的比</description>
    </item>
    
    <item>
      <title>go websocket</title>
      <link>/language/golang/go-websocket/</link>
      <pubDate>Tue, 12 Feb 2019 08:50:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-websocket/</guid>
      <description>https://github.com/eranyanay/1m-go-websockets</description>
    </item>
    
    <item>
      <title>go nil</title>
      <link>/language/golang/go-nil/</link>
      <pubDate>Mon, 21 Jan 2019 11:25:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-nil/</guid>
      <description>不得不知道的golang知识点之nil - Go语言中文网 - Golang中文社区 理解 Go nil 理解Go语言的nil - 简书 nils in Go - Go 101 (Golang Knowledgebase) golang中</description>
    </item>
    
    <item>
      <title>go file glob</title>
      <link>/language/golang/go-file-glob/</link>
      <pubDate>Fri, 18 Jan 2019 11:53:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-file-glob/</guid>
      <description>描述 glob是shell使用的路径匹配符，类似于正则表达式，但是与正则表达式不完全相同。在linux操作中如文件匹配等等其实已经使用了glo</description>
    </item>
    
    <item>
      <title>golang中的权限模型casbin</title>
      <link>/language/golang/go-casbin/</link>
      <pubDate>Wed, 16 Jan 2019 10:44:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-casbin/</guid>
      <description>理解 PERM 模型 PERM(Policy, Effect, Request, Matchers)模型很简单, 但是反映了权限的本质 – 访问控制 Policy: 定义权限的规则集(动态变化,可存数据库) Request: 访问请求, 也就是谁(</description>
    </item>
    
    <item>
      <title>go metrics instructment</title>
      <link>/language/golang/go-metrics-instructment/</link>
      <pubDate>Fri, 11 Jan 2019 16:45:35 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-metrics-instructment/</guid>
      <description>go 实现 Interval heroku/instruments: Collecting metrics over discrete time intervals rcrowley/go-metrics: Go port of Coda Hale&#39;s Metrics library Instrumentation by Composition Go Metrics Interval metrics</description>
    </item>
    
    <item>
      <title>google 编译时依赖注入框架di wire</title>
      <link>/language/golang/go-di-wire/</link>
      <pubDate>Fri, 11 Jan 2019 13:44:21 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-di-wire/</guid>
      <description>[译]使用Go Cloud的Wire进行编译时依赖注入 - 掘金 google/wire: Compile-time Dependency Injection for Go</description>
    </item>
    
    <item>
      <title>golang c10m</title>
      <link>/language/golang/golang-c10m/</link>
      <pubDate>Fri, 04 Jan 2019 18:26:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-c10m/</guid>
      <description>Golang适合高并发场景的原因分析 · Golang语言社区 · 看云</description>
    </item>
    
    <item>
      <title>go clipboard</title>
      <link>/language/golang/go-clipboard/</link>
      <pubDate>Fri, 04 Jan 2019 10:29:21 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-clipboard/</guid>
      <description>hebestreit/clipboard-yt-dl: This Go application will monitor your clipboard for urls and automatically starts download with youtube-dl. 自动监测剪切板,并进行下在youtube视频</description>
    </item>
    
    <item>
      <title>go gin security</title>
      <link>/language/golang/go-gin-security/</link>
      <pubDate>Fri, 04 Jan 2019 10:24:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gin-security/</guid>
      <description>gin-security Gin security middleware Sign 介绍 重放攻击 //ErrorReplayAttack replay attack 用于验证接口请求完整性，对请求的所有KV（除媒体文件）以及时间戳timestamp和随机字符串nonce，进行大</description>
    </item>
    
    <item>
      <title>go实现级联压缩json gzip</title>
      <link>/language/golang/go-gzip-json/</link>
      <pubDate>Thu, 03 Jan 2019 21:20:45 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gzip-json/</guid>
      <description>type JSONMeddler bool func (zip JSONMeddler) DecodeRead(fieldAddr, scanTarget interface{}) error { ptr := scanTarget.(*[]byte) if ptr == nil { return fmt.Errorf(&amp;quot;JSONMeddler.PostRead: nil pointer&amp;quot;) } raw := *ptr if zip { // un-gzip and decode json gzipReader, err := gzip.NewReader(bytes.NewReader(raw)) if err != nil { return fmt.Errorf(&amp;quot;Error creating gzip Reader: %v&amp;quot;, err) } defer gzipReader.Close() jsonDecoder := json.NewDecoder(gzipReader) if err := jsonDecoder.Decode(fieldAddr); err != nil { return fmt.Errorf(&amp;quot;JSON decoder/gzip error: %v&amp;quot;,</description>
    </item>
    
    <item>
      <title>go rbtree</title>
      <link>/language/golang/go-rbtree/</link>
      <pubDate>Sun, 30 Dec 2018 11:06:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-rbtree/</guid>
      <description>github.com/HuKeping/rbtree
A simple case for string items.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/HuKeping/rbtree&amp;quot; ) func main() { rbt := rbtree.New() rbt.Insert(rbtree.String(&amp;quot;Hello&amp;quot;)) rbt.Insert(rbtree.String(&amp;quot;World&amp;quot;)) rbt.Ascend(rbt.Min(), Print) } func Print(item rbtree.Item) bool { i, ok := item.(rbtree.String) if !ok { return false } fmt.Println(i) return true }  A quite interesting case for struct items.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/HuKeping/rbtree&amp;quot; &amp;quot;time&amp;quot; ) type Var struct { Expiry time.Time `json:&amp;quot;expiry,omitempty&amp;quot;` ID string `json:&amp;quot;id&amp;quot;,omitempty` } // We will order the node by `Time` func (x Var) Less(than rbtree.</description>
    </item>
    
    <item>
      <title>go excelize xlsx</title>
      <link>/language/golang/go-excelize-xlsx/</link>
      <pubDate>Fri, 28 Dec 2018 15:40:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-excelize-xlsx/</guid>
      <description>baliance/gooxml: Office Open/OOXML/ECMA-376 documents (.docx, .xlsx, .pptx) 中文文档 Installation go get github.com/360EntSecGroup-Skylar/excelize 单元格转换 // excelize.ToAlphaString(36) convert 36 to column title AK // excelize.TitleToNumber(&amp;quot;AK&amp;quot;) convert AK and ak to column title 36 xlsx.SetCellStr(sheet, excelize.ToAlphaString(j)+i, strings.TrimSpace(row[j])) 设置某个单元格的值 func New(name, sheet string) *excelize.File { xlsx, err := excelize.OpenFile(name) if err != nil { file = excelize.NewFile() } /</description>
    </item>
    
    <item>
      <title>golang 数据结构 Data Structures</title>
      <link>/language/golang/go-data-structures/</link>
      <pubDate>Fri, 28 Dec 2018 13:53:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-data-structures/</guid>
      <description>Data Structures GoDS (Go Data Structures). Containers (Sets, Lists, Stacks, Maps, Trees), Sets (HashSet, TreeSet, LinkedHashSet), Lists (ArrayList, SinglyLinkedList, DoublyLinkedList), Stacks (LinkedListStack, ArrayStack), Maps (HashMap, TreeMap, HashBidiMap, TreeBidiMap, LinkedHashMap), Trees (RedBlackTree, AVLTree, BTree, BinaryHeap), Comparators, Iterators, …</description>
    </item>
    
    <item>
      <title>go slice</title>
      <link>/language/golang/go-slice/</link>
      <pubDate>Thu, 27 Dec 2018 11:53:37 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-slice/</guid>
      <description>var numbers = make([]int) // len 0 cap 0 var numbers = make([]int,5) // len 5 cap 5 var numbers = make([]int,3,5) // len 3 cap 5 对切片的各类操作，如去重Distinct,求交集InnerJoin,合集FullJoi</description>
    </item>
    
    <item>
      <title>golang 集合操作</title>
      <link>/language/golang/go-set/</link>
      <pubDate>Thu, 27 Dec 2018 11:46:23 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-set/</guid>
      <description>子交并补 集合（集） set 非负整数集 the set of all non-negative integers 自然数集 the set of all natural numbers 正整数集 the set of all positive integers 整数集 the set of all integers 有理数集 the set of all rational numbers 实数集 the set of all real numbers 元素</description>
    </item>
    
    <item>
      <title>go crypto aes</title>
      <link>/language/golang/go-crypto-aes/</link>
      <pubDate>Fri, 21 Dec 2018 14:16:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-crypto-aes/</guid>
      <description>aead/chacha20poly1305: ChaCha20Poly1305 and XChaCha20Poly1305 AEAD implementations 带有附加数据的加密算法-libsodium OAuth请求头里的nonce（随机数）、timestamp（时间戳）、signatr</description>
    </item>
    
    <item>
      <title>go hacker</title>
      <link>/language/golang/go-hacker/</link>
      <pubDate>Thu, 20 Dec 2018 13:10:52 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-hacker/</guid>
      <description>Go黑帽子 使用go语言来实现python黑帽子和绝技的代码 1.unix密码破解器 package main import( &amp;quot;bufio&amp;quot; &amp;quot;flag&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;os&amp;quot; &amp;quot;log&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;strings&amp;quot; crypt &amp;quot;github.com/amoghe/go-crypt&amp;quot; //加密包 ) var ( passfile string //unix密码</description>
    </item>
    
    <item>
      <title>go slice compare</title>
      <link>/language/golang/go-slice-compare/</link>
      <pubDate>Wed, 19 Dec 2018 11:34:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-slice-compare/</guid>
      <description>package main import &amp;quot;reflect&amp;quot; func main(){ } func CompareSlices_Reflect(a, b []int) bool { return reflect.DeepEqual(a, b) } func CompareSlices_General(a, b []int) bool { if len(a) != len(b) { return false } if (a == nil) != (b == nil) { return false } for i, v := range a { if v != b[i] { return false } } return true } func CompareSlices_BCE(a, b []int) bool { if len(a) !</description>
    </item>
    
    <item>
      <title>go aliyun dns</title>
      <link>/language/golang/go-aliyun-dns/</link>
      <pubDate>Sat, 15 Dec 2018 09:44:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-aliyun-dns/</guid>
      <description>设置域名解析DOC 获取解析记录信息API 1. 获取域名解析列表 DescribeDomainRecords { &amp;quot;RequestId&amp;quot;: &amp;quot;536E9CAD-DB30-4647-AC87-AA5CC38C5382&amp;quot;, &amp;quot;TotalCount&amp;quot;: 2, &amp;quot;PageNumber&amp;quot;: 1, &amp;quot;PageSize&amp;quot;: 2, &amp;quot;DomainRecords&amp;quot;: { &amp;quot;Record&amp;quot;: [ { &amp;quot;DomainName&amp;quot;: &amp;quot;example.com&amp;quot;, &amp;quot;RecordId&amp;quot;: &amp;quot;9999985&amp;quot;, &amp;quot;RR&amp;quot;: &amp;quot;www&amp;quot;, &amp;quot;Type&amp;quot;: &amp;quot;MX&amp;quot;, &amp;quot;Value&amp;quot;: &amp;quot;mail1.hichina.com&amp;quot;, &amp;quot;Line&amp;quot;: &amp;quot;default&amp;quot;, &amp;quot;Priority&amp;quot;: 5, &amp;quot;TTL&amp;quot;: 600, &amp;quot;Status&amp;quot;: &amp;quot;Enable&amp;quot;, &amp;quot;Locked&amp;quot;: false }, { &amp;quot;DomainName&amp;quot;: &amp;quot;example.com&amp;quot;, &amp;quot;RecordId&amp;quot;: &amp;quot;9999986&amp;quot;,</description>
    </item>
    
    <item>
      <title>go 实现迭代器</title>
      <link>/language/golang/go-iter/</link>
      <pubDate>Mon, 19 Nov 2018 10:19:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-iter/</guid>
      <description>匿名函数实现 package main import &amp;quot;fmt&amp;quot; type Ints []int func (i Ints) Iterator() func() (int, bool) { index := 0 return func() (val int, ok bool) { if index &amp;gt;= len(i) { return } val, ok = i[index], true index++ return } } func main() { ints := Ints{1, 2, 3} next := ints.Iterator() for { val, ok := next() if !ok { break } fmt.Println(val)</description>
    </item>
    
    <item>
      <title>go strings</title>
      <link>/language/golang/go-strings/</link>
      <pubDate>Tue, 06 Nov 2018 11:54:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-strings/</guid>
      <description>Golang 字符串操作小结 本节主要说明了字符串的一些常用操作，并举例说明之。 字符串比较 func stringsCompare() { left := &amp;quot;hello&amp;quot; right := &amp;quot;hell&amp;quot; // 方法一，使用Compare // func Compare(a, b string) int fmt.Println(strings.Compare(left, right)) //</description>
    </item>
    
    <item>
      <title>go语言基础-map技巧</title>
      <link>/language/golang/go-map-skill/</link>
      <pubDate>Tue, 06 Nov 2018 10:10:51 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-map-skill/</guid>
      <description>Golang map 的底层实现 - 简书 当一个map变量被创建后，你可以指定map的容量，但是不可以在map上使用cap()方法 代码示例： package main func main() { m := make(map[string]int, 99) cap(m) //error</description>
    </item>
    
    <item>
      <title>go wait_tcp</title>
      <link>/language/golang/go-wait_tcp/</link>
      <pubDate>Mon, 05 Nov 2018 17:45:27 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-wait_tcp/</guid>
      <description>#!/bin/bash # Variables WERCKER_STEP_WAIT_TCP_HOST=${WERCKER_STEP_WAIT_TCP_HOST:-localhost} WERCKER_STEP_WAIT_TCP_PORT=${WERCKER_STEP_WAIT_TCP_PORT:-8080} WERCKER_STEP_WAIT_TCP_TIMEOUT=${WERCKER_STEP_WAIT_TCP_TIMEOUT:-60} function waitTcp { while ! nc -q 1 $WERCKER_STEP_WAIT_TCP_HOST $WERCKER_STEP_WAIT_TCP_PORT &amp;lt;/dev/null; do sleep 1 let &amp;quot;WERCKER_STEP_WAIT_TCP_TIMEOUT--&amp;quot; if [[ &amp;quot;$WERCKER_STEP_WAIT_TCP_TIMEOUT&amp;quot; == &amp;quot;0&amp;quot; ]]; then exit 1 fi echo &amp;quot;waiting for $WERCKER_STEP_WAIT_TCP_HOST:$WERCKER_STEP_WAIT_TCP_PORT $WERCKER_STEP_WAIT_TCP_TIMEOUT&amp;quot; done } // waitTCP wait until the TCP service is accepting connections // // It times out and panics after 60 seconds. func waitTCP(addr string) { log.Printf(&amp;quot;Waiting for TCP to be available at</description>
    </item>
    
    <item>
      <title>Go 基础总结</title>
      <link>/language/golang/go/</link>
      <pubDate>Mon, 15 Oct 2018 09:28:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go/</guid>
      <description>strings — 字符串操作 · Go语言标准库 go lib keysonZZZ/kgo: go library golang 位操作 10000010 [A] 00000010 [B] 11111101 (NOT B) 00000010 ^ 11111111 = 11111101 [B XOR 0xff] 10000010 ^ 00000010 = 10000000 [A XOR B] 10000010 &amp;amp; 00000010 = 00000010 [A AND B] 10000010 &amp;amp;^00000010 = 10000000 [A &#39;AND NOT&#39; B] 10000010&amp;amp;(^00000010)= 10000000 [A AND (NOT B)] 创</description>
    </item>
    
    <item>
      <title>Golang中的编码检测mahonia</title>
      <link>/language/golang/golang%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sat, 29 Sep 2018 11:56:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid>
      <description>编码转换 [编码检测chardet/detector_test] github.com/saintfish/chardet 自动检测 并转换 package gogo import ( &amp;quot;fmt&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/axgle/mahonia&amp;quot; &amp;quot;github.com/saintfish/chardet&amp;quot; ) // 自动检测编码，并转为utf8 func ToUTF8(buf string) string { dt :=</description>
    </item>
    
    <item>
      <title>Go Syscall</title>
      <link>/language/golang/go-syscall/</link>
      <pubDate>Tue, 25 Sep 2018 14:50:19 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-syscall/</guid>
      <description>Golang-too_many_open_files // 方式一: if err := syscall.Setrlimit(syscall.RLIMIT_NOFILE, &amp;amp;syscall.Rlimit{Cur: 1000000, Max: 1000000}); err != nil { panic(err) } //方式二: var rlimit syscall.Rlimit err := syscall.Getrlimit(syscall.RLIMIT_NOFILE, &amp;amp;rlimit) if err != nil { fmt.Println(&amp;quot;get rlimit error: &amp;quot; + err.Error()) os.Exit(1) } rlimit.Cur = 50000 //以字节为单位 rlimit.Max = rlimit.Cur + 1024 err = syscall.Setrlimit(syscall.RLIMIT_NOFILE, &amp;amp;rlimit) if err != nil</description>
    </item>
    
    <item>
      <title>Go Mysql 事务的使用方式</title>
      <link>/language/golang/go-mysql-tx-%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 19 Sep 2018 16:33:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-mysql-tx-%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</guid>
      <description>经过总结和实验，我采用了下面这种写法，defer tx.Rollback() 使得事务回滚始终得到执行。 当 tx.Commit() 执行后，tx.Rollback() 起到关闭事务的作用， 当程序</description>
    </item>
    
    <item>
      <title>Go语言调用外部程序时支持管道符</title>
      <link>/language/golang/go-pipeline/</link>
      <pubDate>Tue, 28 Aug 2018 18:18:13 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-pipeline/</guid>
      <description>sh -c &amp;quot;sting&amp;quot; -c 参数是从字符串执行的意思 func run4() { cmd := exec.Command(&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, `ps -eaf|grep &amp;quot;nginx: master&amp;quot;|grep -v &amp;quot;grep&amp;quot;|awk &#39;{print $2}&#39;`) cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.Run() } 有一个需求是用go语言程序调用外部命令时,允许使用管道符,如 ls</description>
    </item>
    
    <item>
      <title>Go 函数式编程</title>
      <link>/language/golang/go-underscore/</link>
      <pubDate>Tue, 28 Aug 2018 11:17:08 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-underscore/</guid>
      <description>Underscore.go Move Fast; Optimize Late A useful collection of Go utilities. Designed for programmer happiness. TL;DR Sort-of like underscore.js, but for Go API Documention GoDoc is WorkInProgress Each Each func(func(A int), []A) Each func(func(A B), []A) Applies the given iterator function to each element of a collection (slice or map). If the collection is a Slice, the iterator function arguments are value, index If the collection is a Map, the</description>
    </item>
    
    <item>
      <title>Go Mapreduce</title>
      <link>/language/golang/go-mapreduce/</link>
      <pubDate>Tue, 28 Aug 2018 11:04:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-mapreduce/</guid>
      <description>func Map(f func (int) int, v []int) (r []int) { r = make([]int, len(v)) for i, value := range v { r[i] = f(value) } return } func main () { v := []int{1, 2, 3, 4} fmt.Println(Map(func(x int) int {return x * 5}, v )) }  </description>
    </item>
    
    <item>
      <title>Golang Gin Middle</title>
      <link>/language/golang/golang-gin-middle/</link>
      <pubDate>Thu, 16 Aug 2018 17:20:23 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-gin-middle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go Vgomod</title>
      <link>/language/golang/go-vgo-modules/</link>
      <pubDate>Thu, 09 Aug 2018 16:20:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-vgo-modules/</guid>
      <description>travis 集成 language: go matrix: include: - go: &amp;quot;1.10.x&amp;quot; script: go test -v ./... - go: &amp;quot;1.11.x&amp;quot; script: go test -v -mod=vendor ./... env: - GO111MODULE=on # 如果不需要安装，即跳过安装阶段，就直接设为true install: true # script字段指定要运行的</description>
    </item>
    
    <item>
      <title>Go Meddler</title>
      <link>/language/golang/golang-meddler/</link>
      <pubDate>Sat, 28 Jul 2018 10:45:54 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-meddler/</guid>
      <description>Meddler 是一个小工具箱，用于在 sql 查询和结构之间回移数据。 它不是一个完整的 ORM 。 它是为了添加一些方便的方法，同时在程序员的手中留下更多的控制。 软件包文</description>
    </item>
    
    <item>
      <title>Go Sync Pool</title>
      <link>/language/golang/go-sync-pool/</link>
      <pubDate>Thu, 26 Jul 2018 18:14:27 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-sync-pool/</guid>
      <description>一个sync.Pool对象就是一组临时对象的集合。Pool是协程安全的。 Pool用于存储那些被分配了但是没有被使用，而未来可能会使用的值，以</description>
    </item>
    
    <item>
      <title>Go Math 常量</title>
      <link>/language/golang/go-math-const/</link>
      <pubDate>Thu, 26 Jul 2018 16:35:29 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-math-const/</guid>
      <description>/usr/local/go/src/math/const.go package math // Mathematical constants. const ( E = 2.71828182845904523536028747135266249775724709369995957496696763 // https://oeis.org/A001113 Pi = 3.14159265358979323846264338327950288419716939937510582097494459 // https://oeis.org/A000796 Phi = 1.61803398874989484820458683436563811772030917980576286213544862 // https://oeis.org/A001622 Sqrt2 = 1.41421356237309504880168872420969807856967187537694807317667974 // https://oeis.org/A002193 SqrtE = 1.64872127070012814684865078781416357165377610071014801157507931 // https://oeis.org/A019774 SqrtPi = 1.77245385090551602729816748334114518279754945612238712821380779 // https://oeis.org/A002161 SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038 // https://oeis.org/A139339 Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009 // https://oeis.org/A002162 Log2E = 1 / Ln2 Ln10 = 2.30258509299404568401799145468436420760110148862877297603332790 // https://oeis.org/A002392 Log10E = 1 / Ln10 ) // Floating-point limit values. // Max</description>
    </item>
    
    <item>
      <title>Golang-基于reflect和tag自动填充struct数据</title>
      <link>/language/golang/go-interface-reflect-tag/</link>
      <pubDate>Wed, 25 Jul 2018 15:29:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect-tag/</guid>
      <description>用Go开发Server端提供一些JSON数据格式的API，会定义业务Model，同时标记其json名字。 type School struct { ID int json:&amp;quot;id&amp;quot; Name string json:&amp;quot;name&amp;quot; } 通常也会复用这</description>
    </item>
    
    <item>
      <title>Go Postgres</title>
      <link>/language/golang/go-postgres/</link>
      <pubDate>Tue, 24 Jul 2018 18:39:25 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-postgres/</guid>
      <description>Go 有很多用于 PostgreSQL 的驱动。其中，最流行的是 lib/pg。它是使用纯 Go 语言开发的，完整实现 Go 语言 database/sql 规范的驱动。 安装 lib/pg 通过 go get 可以轻松安装 lib/pg go get github.com/lib/pq 连</description>
    </item>
    
    <item>
      <title>Go Errorgroup</title>
      <link>/language/golang/go-sync-errorgroup/</link>
      <pubDate>Tue, 24 Jul 2018 15:18:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-sync-errorgroup/</guid>
      <description>https://github.com/bketelsen/gogrep Run strikingly fast parallel file searches in Go with sync.ErrGroup - O&#39;Reilly Media 【翻译】使用 sync.ErrGroup 实现并发搜索文件 - Go中国技术社区 - golang Go 的一个很重要的的特性就是其原生的并发，像 channel 和 goroutines 这样的利器。</description>
    </item>
    
    <item>
      <title>Go net-http中间件 实现逐级串联 Middleware</title>
      <link>/language/golang/go-http-middleware/</link>
      <pubDate>Mon, 23 Jul 2018 16:54:40 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-middleware/</guid>
      <description>如何实现Golang的http请求处理中间件（译） http中间件 Go语言的http的Handler很好写，下面是一个helloworld例子</description>
    </item>
    
    <item>
      <title>golang web开发 Handler测试利器httptest</title>
      <link>/language/golang/go-httptest/</link>
      <pubDate>Mon, 23 Jul 2018 09:17:49 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-httptest/</guid>
      <description>https://github.com/julienschmidt/go-http-routing-benchmark 我们用go开发一个Web Server后，打算单元测试写的handler函数，在不知道httptest之前，使用比较笨的方法 就是编译运行该W</description>
    </item>
    
    <item>
      <title>Go Http</title>
      <link>/language/golang/go-http-url/</link>
      <pubDate>Sat, 21 Jul 2018 17:04:22 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-url/</guid>
      <description>URL URL类型 代表一个解析后的URL（或者说，一个URL参照）。 URL基本格式如下： scheme后不是冒号加双斜线的URL被解释为如下格式： scheme:opaque[?query][#fragment]</description>
    </item>
    
    <item>
      <title>Go Chan Fetures</title>
      <link>/language/golang/go-chan-fetures/</link>
      <pubDate>Sat, 21 Jul 2018 09:22:29 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-chan-fetures/</guid>
      <description>14.9 实现 Futures 模式 所谓Futures就是指：有时候在你使用某一个值之前需要先对其进行计算。这种情况下，你就可以在另一个处理器上进行该值的计算，到使</description>
    </item>
    
    <item>
      <title>Go Chan 原理</title>
      <link>/language/golang/go-channel/</link>
      <pubDate>Sat, 21 Jul 2018 09:22:29 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-channel/</guid>
      <description>注：该文原文为 ChannelAxioms func main() { stop := make(chan bool) GoWait() time.Sleep(10 * time.Second) fmt.Println(&amp;quot;可以了，通知监控停止&amp;quot;) stop&amp;lt;- true //为了检测监控过是否停止，</description>
    </item>
    
    <item>
      <title>Go 类型断言</title>
      <link>/language/golang/go-interface-assert/</link>
      <pubDate>Fri, 20 Jul 2018 19:01:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-assert/</guid>
      <description>在Golang项目开发中我们常会使用到空接口interface{}与reflect。下面是作者在学习Golang过程中遇到的一些关于Refl</description>
    </item>
    
    <item>
      <title>golang使用CSV导出大量数据</title>
      <link>/language/golang/golang-cvs/</link>
      <pubDate>Thu, 19 Jul 2018 13:54:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-cvs/</guid>
      <description>最近在做一个导出功能，最初是使用https://github.com/tealeg/xlsx做的，但是发现导出有个30W行的excel时，这</description>
    </item>
    
    <item>
      <title>Golang之Cobra使用详解</title>
      <link>/language/golang/golang-cobra/</link>
      <pubDate>Tue, 17 Jul 2018 18:36:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-cobra/</guid>
      <description>Cobra介绍 Cobra是一个库，其提供简单的接口来创建强大现代的CLI接口，类似于git或者go工具。同时，它也是一个应用，用来生成个人应</description>
    </item>
    
    <item>
      <title>Golang之使用Flag和Pflag</title>
      <link>/language/golang/golang-pflag/</link>
      <pubDate>Tue, 17 Jul 2018 18:36:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-pflag/</guid>
      <description>转 Golang之使用Flag和Pflag - 陈健的博客 | ChenJian Blog Golang之使用Flag和Pflag Pflag github地址：spf13/pflag D</description>
    </item>
    
    <item>
      <title>golang-viper详解</title>
      <link>/language/golang/golang-viper/</link>
      <pubDate>Tue, 17 Jul 2018 18:36:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-viper/</guid>
      <description>cobra 命令生成工具 viper 提供了配置文件的解析工作 pflag 提供命令行的解析工作 cfg := &amp;amp;ServerConfig{ RedisURL: viper.GetString(&amp;quot;redis_port_6379_tcp&amp;quot;) | viper.GetString(&amp;quot;database_url&amp;quot;), } viper 是什么？ viper 为 Go 应用程序提供了一个完整的配置解决方案。它被设计</description>
    </item>
    
    <item>
      <title>Go Template</title>
      <link>/language/golang/go-template/</link>
      <pubDate>Thu, 12 Jul 2018 16:28:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-template/</guid>
      <description>Go Template - 简书 Go Template学习2 - 简书 Golang Template 简明笔记 - 简书 基于template做的那个tool transforming Junit XML report to HTML. fmt.Println(&amp;quot;username:&amp;quot;, template.HTMLEscapeString(r.Form.Get(&amp;quot;username&amp;quot;))) //输出到服务器端 fmt.Println(&amp;quot;password:&amp;quot;, template.HTMLEscapeString(r.Form.Get(&amp;quot;password&amp;quot;))) template.HTMLEscape(w, []byte(r.Form.Get(&amp;quot;username&amp;quot;))) //</description>
    </item>
    
    <item>
      <title>go语言的模板，text-template包</title>
      <link>/language/golang/go-tmpl/</link>
      <pubDate>Thu, 12 Jul 2018 16:28:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-tmpl/</guid>
      <description>go语言的模板，text/template包 定义 模板就是将一组文本嵌入另一组文本里 传入string--最简单的替换 package main import ( &amp;quot;os&amp;quot; &amp;quot;text/template&amp;quot; ) func main() { name := &amp;quot;waynehu&amp;quot;</description>
    </item>
    
    <item>
      <title>Go Build Tags</title>
      <link>/language/golang/go-build-tags/</link>
      <pubDate>Tue, 26 Jun 2018 15:01:09 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-build-tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang的文件锁操作flock</title>
      <link>/language/golang/go-file-flock/</link>
      <pubDate>Thu, 21 Jun 2018 09:09:40 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-file-flock/</guid>
      <description>有时候，我们使用go语言开发一些程序的时候，往往出现多个进程同时操作同一份文件的情况，这很容易导致文件中的数据混乱。 我们需要采用一些手段来平</description>
    </item>
    
    <item>
      <title>Go Mysql</title>
      <link>/language/golang/go-mysql/</link>
      <pubDate>Thu, 14 Jun 2018 18:09:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-mysql/</guid>
      <description>MySQL 连接池问题 Mysql Server 配置: max_connections = 2000 # mysql 最大连接数,默认是150 wait_timeout = 3600 # wait_timeout 针对非交互式连接,空闲连接 Sleep interactive_timeout = 3600 # interactive_timeout 针对交互式连接,活动连接. Golang 配置 db.SetMaxOpenConns(100) //</description>
    </item>
    
    <item>
      <title>Go Mysql Deadlock检测</title>
      <link>/language/golang/go-mysql-deadlock/</link>
      <pubDate>Thu, 14 Jun 2018 18:09:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-mysql-deadlock/</guid>
      <description>golang中实现 Mysql 死锁检测 // IsDeadlock checks if error is deadlock func IsDeadlock(err error) bool { knownDatabaseErrorMessages := []string{ &amp;quot;Deadlock found when trying to get lock; try restarting transaction&amp;quot;, /* MySQL / MariaDB */ &amp;quot;database is locked&amp;quot;, /* SQLite */ } for _, msg := range knownDatabaseErrorMessages { if strings.Contains(err.Error(), msg) { return true } } return false } func</description>
    </item>
    
    <item>
      <title>Golang exec.Command</title>
      <link>/language/golang/golang-exec-ico/</link>
      <pubDate>Thu, 07 Jun 2018 10:01:44 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-exec-ico/</guid>
      <description>go 调用shell命令 两种方式(有无返回值) - 风逸者儿的博客 - CSDN博客 // 封装 git 命令 func git(args ...string) (string, error) { cmd := exec.Command(&amp;quot;git&amp;quot;, args...) out, err := cmd.CombinedOutput() if err != nil { return &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;git failed: %q: %q (%q)&amp;quot;, err, out,</description>
    </item>
    
    <item>
      <title>Go Http开发</title>
      <link>/language/golang/go-http-method/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-method/</guid>
      <description>&lt;p&gt;Go 是一门新语言。很多人都是用 Go 来开发 Web 服务。Web 开发很多同学急于求成，直接使用 &lt;a href=&#34;https://github.com/astaxie/beego&#34; target=&#34;_blank&#34;&gt;beego&lt;/a&gt;, &lt;a href=&#34;https://github.com/labstack/echo&#34; target=&#34;_blank&#34;&gt;echo&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/kataras/iris&#34; target=&#34;_blank&#34;&gt;iris&lt;/a&gt; 等知名框架。对标准库 &lt;code&gt;net/http&lt;/code&gt; 的了解甚少。这里我就主要聊一下标准库 &lt;code&gt;net/http&lt;/code&gt; 开发 Web 服务时的使用细节。&lt;/p&gt;

&lt;h3 id=&#34;创建-http-服务&#34;&gt;创建 HTTP 服务&lt;/h3&gt;

&lt;p&gt;在 Go 中，创建 HTTP 服务很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

// in main.go

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main(){
    if err := http.ListenAndServe(&amp;quot;:12345&amp;quot;,nil); err != nil{
        fmt.Println(&amp;quot;start http server fail:&amp;quot;,err)
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就会启动一个 HTTP 服务在端口 &lt;strong&gt;12345&lt;/strong&gt;。浏览器输入 &lt;code&gt;http://localhost:12345/&lt;/code&gt; 就可以访问。当然从代码看出，没有给这个 HTTP 服务添加实际的处理逻辑，所有的访问都是默认的 &lt;code&gt;404 Not Found&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Http开发Form表单处理</title>
      <link>/language/golang/go-http-form/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-form/</guid>
      <description>提问? 对于一个form表单中有多个文件类型上传的在golang中如何处理? multipart: NextPart: http: invalid Read on closed Body 解决方案 : 修改Header的大小 s := &amp;amp;http.Server{ Addr: &amp;quot;:12345&amp;quot;, ReadTimeout: 10 * time.Second,</description>
    </item>
    
    <item>
      <title>Golang发送post表单请求</title>
      <link>/language/golang/go-http-post/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-post/</guid>
      <description>golang这边将map结构序列化通常采用json.Marshal和json.Unmarshal来做，但是在php server端还需要做js</description>
    </item>
    
    <item>
      <title>golang multipart上传文件到远端（如上传微信临时素材）</title>
      <link>/language/golang/go-http-form-multipart/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-form-multipart/</guid>
      <description>golang multipart上传文件到远端（如上传微信临时素材） 最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，</description>
    </item>
    
    <item>
      <title>Go Bindata 内嵌静态资源</title>
      <link>/language/golang/go-bindata/</link>
      <pubDate>Tue, 05 Jun 2018 17:10:30 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-bindata/</guid>
      <description>使用 Go 开发应用的时候，有时会遇到需要读取静态资源的情况。比如开发 Web 应用，程序需要加载模板文件生成输出的 HTML。在程序部署的时候，除了发布应</description>
    </item>
    
    <item>
      <title>golang进阶(七)------go语言的几种测试方法</title>
      <link>/language/golang/test/go-short/</link>
      <pubDate>Wed, 16 May 2018 16:53:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/test/go-short/</guid>
      <description>golang进阶(七)——go语言的几种测试方法 · 独自登高楼 望断天涯路 golang进阶(七)------go语言的几种测试方法 用了go的测试</description>
    </item>
    
    <item>
      <title>golang进阶 后台进程的启动和停止</title>
      <link>/language/golang/go-daemon/</link>
      <pubDate>Wed, 16 May 2018 16:49:55 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-daemon/</guid>
      <description>启动命令 我们先来个非后台运行的启动命令 func init() { startCmd := &amp;amp;cobra.Command{ Use: &amp;quot;start&amp;quot;, Short: &amp;quot;Start Gonne&amp;quot;, Run: func(cmd *cobra.Command, args []string) { startHttp() }, } startCmd.Flags().BoolVarP(&amp;amp;daemon, &amp;quot;deamon&amp;quot;, &amp;quot;d&amp;quot;, false, &amp;quot;is daemon?&amp;quot;) RootCmd.AddCommand(startCmd) } startHttp方法启动一个http的web</description>
    </item>
    
    <item>
      <title>Golang intSlice 转换  ByteSlice</title>
      <link>/language/golang/go-convert-int2byte/</link>
      <pubDate>Wed, 16 May 2018 14:56:00 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-convert-int2byte/</guid>
      <description>binary.Write(b, binary.LittleEndian, myIntSlice) 通过 bytes.Buffer buf := new(bytes.Buffer) var num uint16 = 1234 err := binary.Write(buf, binary.LittleEndian, num) if err != nil { fmt.Println(&amp;quot;binary.Write failed:&amp;quot;, err) } fmt.Printf(&amp;quot;% x&amp;quot;, buf.Bytes()) package main import ( &amp;quot;fmt&amp;quot; &amp;quot;strconv&amp;quot; ) func main() { a := []int{1, 2434, 3, 4} fmt.Printf(&amp;quot;%s&amp;quot;, sByteFromSIntTwo(a, true)) } //Converts []int to []byte func sByteFromSIntTwo(s []int, com bool) []byte { b := make([]byte, 0) for _, test :=</description>
    </item>
    
    <item>
      <title>Go 通过socks5代理 访问mysql</title>
      <link>/language/golang/db/go-mysql-proxy/</link>
      <pubDate>Mon, 14 May 2018 19:01:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/go-mysql-proxy/</guid>
      <description>注册 mysql 的 ssh 代理 func main(){ var dsn = &amp;quot;root:123456@mysql_ssh(localhost:3306)/shizhi/?parseTime=true&amp;amp;loc=Local&amp;quot; mysql.RegisterDial(&amp;quot;mysql_ssh&amp;quot;, func(addr string) (conn net.Conn, err error) { passAuth := []ssh.AuthMethod{ssh.Password(&amp;quot;password&amp;quot;)} client, err := ssh.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:22&amp;quot;, &amp;amp;ssh.ClientConfig{ User: &amp;quot;root&amp;quot;, Auth: passAuth, HostKeyCallback: ssh.InsecureIgnoreHostKey(), }) if err != nil { return } conn, err = client.Dial(&amp;quot;tcp&amp;quot;, addr) if err != nil { return } return }) db, err := sql.Open(&amp;quot;mysql&amp;quot;, dsn ) if err != nil { return</description>
    </item>
    
    <item>
      <title>Golang io详解</title>
      <link>/language/golang/golang-io/</link>
      <pubDate>Mon, 14 May 2018 16:09:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-io/</guid>
      <description>勿以浮沙筑高台 io包中最重要的是两个接口：Reader和Writer Reader接口 type Reader interface { Read(p []byte) (n int ,err error) } #####官方文档中关于该接口方法</description>
    </item>
    
    <item>
      <title>Go 将uint8的类型转换为unit32</title>
      <link>/language/golang/go-big-little-endian/</link>
      <pubDate>Fri, 11 May 2018 11:11:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-big-little-endian/</guid>
      <description>golang语言如何判断机器的大小端？ package main import ( &amp;quot;fmt&amp;quot; &amp;quot;unsafe&amp;quot; ) const N int = int(unsafe.Sizeof(0)) func main() { x := 0x1234 p := unsafe.Pointer(&amp;amp;x) p2 := (*[N]byte)(p) if p2[0] == 0 { fmt.Println(&amp;quot;本机器：</description>
    </item>
    
    <item>
      <title>Go Test</title>
      <link>/language/golang/go-test/</link>
      <pubDate>Fri, 11 May 2018 09:03:50 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-test/</guid>
      <description>go test -run=test文件名字 -bench=bench名字 -cpuprofile=生产的cprofile文件名称 -count=每个bench</description>
    </item>
    
    <item>
      <title>Golang Gin Middleware</title>
      <link>/language/golang/golang-gin-middleware/</link>
      <pubDate>Fri, 04 May 2018 08:54:02 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-gin-middleware/</guid>
      <description>dvwright/xss-mw: XssMw is an middleware designed to &amp;quot;auto remove XSS&amp;quot; from user submitted input gin-gonic/autotls: Support Let&#39;s Encrypt for a Go server application. sipt/faygo-security: gin security middleware 用于验证接口请求完整性，对请求的所有KV（除媒体文件）以及时间戳timestamp和随</description>
    </item>
    
    <item>
      <title>Go Genarate</title>
      <link>/language/golang/go-genarate/</link>
      <pubDate>Fri, 13 Apr 2018 09:06:03 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-genarate/</guid>
      <description>Generate 命令和其他go build、go get、go test等没半毛钱关系。需特定执行，命令如下： go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages] 参数说明： -run 正则表达式匹配</description>
    </item>
    
    <item>
      <title>Go 语言接口反射详解</title>
      <link>/language/golang/go-interface-reflect/</link>
      <pubDate>Wed, 11 Apr 2018 10:01:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect/</guid>
      <description>https://segmentfault.com/a/1190000006190038 Golang 反射使用总结 | Ehlxr&#39;s Blog Golang的反射reflect深入理解和示例 - 掘金 Golang接口(interface)三个特性(译文) - WingPig - 博客园</description>
    </item>
    
    <item>
      <title>golang中reflect使用</title>
      <link>/language/golang/go-interface-reflect-usage/</link>
      <pubDate>Wed, 11 Apr 2018 10:01:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect-usage/</guid>
      <description>获取ptr的大小,操作系统指针大小 const ptrSize = 4 &amp;lt;&amp;lt; (^uintptr(0) &amp;gt;&amp;gt; 63) // unsafe.Sizeof(uintptr(0)) but an ideal const uintptr(0) 将 0 转换为 uintptr 类型 ^uintptr(0) 对 0 进行取反 : 32为 0xFFFF FFFFF FFFF FFFF 64位为 0xFFFF FFFFF FFFF FFFF FFFF FFFFF FFFF FFFF (^uintptr(0) &amp;gt;&amp;gt; 63)</description>
    </item>
    
    <item>
      <title>Golang Graceful</title>
      <link>/language/golang/golang-graceful/</link>
      <pubDate>Wed, 11 Apr 2018 08:57:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-graceful/</guid>
      <description>Go 1.8 http graceful 体验 - Coldstar - SegmentFault 思否 Golang开发支持平滑升级（优雅重启）的HTTP服务 - tabalt的博客 Linux Signal及Golang中的信号处理 -</description>
    </item>
    
    <item>
      <title>深入Golang之unsafe</title>
      <link>/language/golang/go-unsafe/</link>
      <pubDate>Tue, 10 Apr 2018 17:28:06 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-unsafe/</guid>
      <description>unsafe · Go语言学习笔记 Go unsafe 包之内存布局 | 飞雪无情的博客 深入Golang之unsafe | jasper的blog unsafe包在Golang中新手</description>
    </item>
    
    <item>
      <title>Go Designpattern</title>
      <link>/language/golang/designpattern/go-designpattern/</link>
      <pubDate>Mon, 09 Apr 2018 18:58:45 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/designpattern/go-designpattern/</guid>
      <description>Go 语言设计模式 Go 语言设计模式的实例代码 创建型模式 简单工厂模式（Simple Factory） 工厂方法模式（Factory Method） 抽象工厂</description>
    </item>
    
    <item>
      <title>Timing</title>
      <link>/language/golang/designpattern/timing/</link>
      <pubDate>Mon, 09 Apr 2018 18:40:37 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/designpattern/timing/</guid>
      <description>// CostTime 采用defer CostTime()()实现无侵入调试 //1. 闭包复制的是原对象指针,这就很容易解释延迟引用现象 func CostTime() func() { // x := 100 // fmt.Printf(&amp;quot;2. x (%p) = %d\n&amp;quot;, &amp;amp;x, x)</description>
    </item>
    
    <item>
      <title>《研磨设计模式》书中的例子</title>
      <link>/language/golang/designpattern/pattern/</link>
      <pubDate>Mon, 09 Apr 2018 18:27:09 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/designpattern/pattern/</guid>
      <description>#DesignPattern 《研磨设计模式》书中的例子 --第二章：简单工厂 本质：选择实现 --第三章：外观模式(Facade) 本质：封装交互，简化调用 --第四章：适配器</description>
    </item>
    
    <item>
      <title>Go 编程语言规范</title>
      <link>/language/golang/_spec/</link>
      <pubDate>Mon, 09 Apr 2018 16:13:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/_spec/</guid>
      <description>Go 编程语言规范 Go 编程语言规范 介绍 Go 是一种设计用于系统编程的通用语言。它是强类型和垃圾回收, 并且显式支持并发编程。程序是从包中构建的 , 其属性允</description>
    </item>
    
    <item>
      <title>Go 语言的那些坑</title>
      <link>/language/golang/_mistakes/</link>
      <pubDate>Mon, 09 Apr 2018 16:13:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/_mistakes/</guid>
      <description>Golang 奇葩点 - RyuGou 的博客 panic 中可以传任何值，不仅仅可以传 string package main import &amp;quot;fmt&amp;quot; func main(){ defer func(){ if r := recover();r != nil{ fmt.Println(r) } }() panic([]int{12312}) } 输出： [12312] 数组切片 slice 的容量问题带来的 bug 请看下列代码: import</description>
    </item>
    
    <item>
      <title>Golang 速查表 Cheatsheets</title>
      <link>/language/golang/_cheatsheets/</link>
      <pubDate>Mon, 09 Apr 2018 16:13:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/_cheatsheets/</guid>
      <description>Golang Golang General gb Go Tool import Scope Constants iota - generator (auto-increment) Variables Short Notation assignment for new variables Multiple Assignment Default values Bitwise operations 位运算符 Types Basic Data Types int, float, bool Short-circuit behavior string Unicode Iterate on symbols Iterate on bytes Composite Types Array Slice Map Control Flow if for switch Function Anonymous Function Closure Recursive Functions defer panic() init() Pointers new vs. make</description>
    </item>
    
    <item>
      <title>Golang Pipe</title>
      <link>/language/golang/go-pipe/</link>
      <pubDate>Sat, 07 Apr 2018 19:40:22 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-pipe/</guid>
      <description>pipe是反向的copy，copy要求提供一对rw，而pipe提供一对rw，两者都是为流服务的。 简而言之就是，pipe的reader读不到就</description>
    </item>
    
    <item>
      <title>Go常用知识点整合</title>
      <link>/language/golang/go%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E5%90%88/</link>
      <pubDate>Wed, 04 Apr 2018 16:28:44 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E5%90%88/</guid>
      <description>文件 1.创建文件 os.Create(filename) 2.打开文件 1)只读 os.OpenFile(filename, os.O_RDONLY, os.ModePerm) 2)写入 f, err := os.OpenFile(filename, os.O_WRONLY, os.ModePerm) 3)追加 os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, os.ModeAppend) 3.判断文件是否存在 if _, err := os.Stat(filename); os.IsNotExist(err) { f, _ = os.Create(filename) } 4.写文件 //Wr</description>
    </item>
    
    <item>
      <title>Go常用知识点整合</title>
      <link>/language/golang/go-gist/</link>
      <pubDate>Wed, 04 Apr 2018 16:28:44 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gist/</guid>
      <description>文件 1.创建文件 os.Create(filename) 2.打开文件 1)只读 os.OpenFile(filename, os.O_RDONLY, os.ModePerm) 2)写入 f, err := os.OpenFile(filename, os.O_WRONLY, os.ModePerm) 3)追加 os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, os.ModeAppend) 3.判断文件是否存在 if _, err := os.Stat(filename); os.IsNotExist(err) { f, _ = os.Create(filename) } 4.写文件 //Wr</description>
    </item>
    
    <item>
      <title>Go 获取相对路径</title>
      <link>/language/golang/sys/os-path/</link>
      <pubDate>Tue, 03 Apr 2018 17:13:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/os-path/</guid>
      <description>一个相对路径的获取 ```go package main import ( &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;path&amp;quot; &amp;quot;path/filepath&amp;quot; ) func main() { execDirAbsPath, _ := os.Getwd() log.Println(&amp;quot;执行程序所在目录的绝对路径 :&amp;quot;, execDirAbsPath) execFileRelativePath, _ := exec.LookPath(os.Args[0]) log.Pr</description>
    </item>
    
    <item>
      <title>Go 函数式编程</title>
      <link>/language/golang/go-func/</link>
      <pubDate>Tue, 03 Apr 2018 15:53:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-func/</guid>
      <description>可变参数函数 // 定义多类型参数 func Fullname(id int, names ...stirng) []string { println(strings.Join(names, &amp;quot; &amp;quot;)) return names //返回参数 } // 1. 普通调用 Fullname(1,&amp;quot;carl&amp;quot;, &amp;quot;sagan&amp;quot;) // 2.传入多切片动态传入 names := []string{&amp;quot;carl&amp;quot;, &amp;quot;sagan&amp;quot;} Fullname(1,append([]string{&amp;quot;mr.&amp;quot;}, names...)...) //先将这个切片展开，</description>
    </item>
    
    <item>
      <title>关于Go的闭包、匿名函数和defer的结合使用案例分析</title>
      <link>/language/golang/go-defer-closure/</link>
      <pubDate>Tue, 03 Apr 2018 14:43:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-defer-closure/</guid>
      <description>func withLock(lk sync.Locker, fn func()) { lk.Lock() defer lk.Unlock() // in case fn panics fn() } Go里的“析构函数”defer关键字类似于PHP的__destruct(),用来标记最后执行的Go语句，一般</description>
    </item>
    
    <item>
      <title>Go Context</title>
      <link>/language/golang/go-context/</link>
      <pubDate>Mon, 02 Apr 2018 18:51:44 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-context/</guid>
      <description>Go context 参考文章列表： golang服务器开发利器 context用法详解 Go语言并发模型：使用 context 使用Golang的Context管理上下文 Golang Context | K</description>
    </item>
    
    <item>
      <title>Go Rand</title>
      <link>/language/golang/go-crypto-rand/</link>
      <pubDate>Sun, 01 Apr 2018 16:11:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-crypto-rand/</guid>
      <description>import ( &amp;quot;crypto/rand&amp;quot; &amp;quot;net&amp;quot; ) func randID() string { b := make([]byte, 4) rand.Read(b) return fmt.Sprintf(&amp;quot;%x&amp;quot;, b) } func GenerateIPAddress(cidr *net.IPNet) (net.IP, error) { b := make([]byte, 4) _, err := rand.Read(b) for i := 0; i &amp;lt; 4; i++ { b[i] = b[i]&amp;amp;^cidr.Mask[i] | cidr.IP[i] } return net.IP(b), err } 设置随机种子 // 若不调用此函数设置随机种</description>
    </item>
    
    <item>
      <title>Golang 文本处理</title>
      <link>/language/golang/go-string/</link>
      <pubDate>Sat, 31 Mar 2018 10:01:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-string/</guid>
      <description>快速产生一个随机字符串 func reverse(s string) string { reverseString := []rune(s) for i, j := 0, len(reverseString)-1; i &amp;lt; len(reverseString)/2; i, j = i+1, j-1 { reverseString[i], reverseString[j] = reverseString[j], reverseString[i] } return string(reverseString) } Go文本处理 在go语言中，bytes.Buffer提供</description>
    </item>
    
    <item>
      <title>Golang 文本相似度</title>
      <link>/language/golang/go-string-similary/</link>
      <pubDate>Sat, 31 Mar 2018 10:01:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-string-similary/</guid>
      <description>浅析文本相似度 浅析文本相似度 - 王琨的博客 - CSDN博客 dexyk/stringosim Knowledge Graph 知识图谱入门 (六) String similarity functions, String distance&#39;s, Jaccard, Levenshtein, Hamming, Jaro-Winkler, Q-grams, N-grams, LCS - Longest Common Subsequence, Cosine similarity... package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/dexyk/stringosim&amp;quot; ) func main() { // fmt.Println(stringosim.Jaccard([]rune(&amp;quot;stringosim&amp;quot;), []rune(&amp;quot;stingobim&amp;quot;)))</description>
    </item>
    
    <item>
      <title>golang string和[]byte的对比</title>
      <link>/language/golang/go-byte-string/</link>
      <pubDate>Sat, 31 Mar 2018 09:59:13 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-byte-string/</guid>
      <description>golang string和[]byte的对比 为啥string和[]byte类型转换需要一定的代价？ 为啥内置函数copy会有一种特殊情况copy(dst</description>
    </item>
    
    <item>
      <title>golang 代码片段</title>
      <link>/language/golang/go-gist-file/</link>
      <pubDate>Sat, 31 Mar 2018 09:52:41 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gist-file/</guid>
      <description>os.OpenFile 文件打开方式(flag) O_RDONLY 以只读文式打开文件。 O_WRONLY 以只写方式打开文件。 O_RDWR 以读写方式打开文件 O_APPEND 以追加方式打开文件，写入的数据将追加到文件尾。 O_CREATE</description>
    </item>
    
    <item>
      <title>golang 代码片段</title>
      <link>/language/golang/go-gist1/</link>
      <pubDate>Sat, 31 Mar 2018 09:52:41 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-gist1/</guid>
      <description>查找重复行 func findDup() { scanner:=bufio.NewScanner(os.Stdin) for scanner.Scan(){ maps[scanner.Text()]++ } for line, count := range maps{ if count &amp;gt;0 { fmt.Printf(&amp;quot;line: %s, count: %d\n&amp;quot;, line, count) } } } 心跳包的简单实现 func worker(start chan bool) { heartbeat := time.Tick(30 * time.Second) for { select { // … do some stuff case &amp;lt;- heartbeat: //… do heartbeat stuff } }</description>
    </item>
    
    <item>
      <title>关于Go语言中的闭包</title>
      <link>/language/golang/go-clousure-intro/</link>
      <pubDate>Sat, 31 Mar 2018 09:30:19 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-clousure-intro/</guid>
      <description>定义 闭包（计算机科学）维基百科。 没啥好说的，直接看百科就好。 package main import ( &amp;quot;fmt&amp;quot; ) func main() { x := closure(10) y := x(1) fmt.Println(y) } // 闭包里传递的都是变量的引用而非值的拷贝。 // 可</description>
    </item>
    
    <item>
      <title>Golang for...range和闭包Closure</title>
      <link>/language/golang/go-closure/</link>
      <pubDate>Sat, 31 Mar 2018 09:07:55 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-closure/</guid>
      <description>闭包的秘密 - 無標題文檔 什么是闭包? 闭包：一个可以使用另外一个函数作用域中的变量 的函数。 用一个专业一点的说法就是：函数调用返回后一个没有释放资</description>
    </item>
    
    <item>
      <title>十条有用的 GO 技术</title>
      <link>/language/golang/_tips10/</link>
      <pubDate>Sat, 31 Mar 2018 08:55:27 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/_tips10/</guid>
      <description>## 运行时检查某个类型Engine 是否实现了接口IRouter I think the first part of your question has already been answered. As for the second part, the code var _ IRouter = &amp;amp;Engine{} Creates a compile-time check that *Engine implements the IRouter interface. We are assigning a value of</description>
    </item>
    
    <item>
      <title>Go语言黑魔法</title>
      <link>/language/golang/go-blackmagic/</link>
      <pubDate>Fri, 30 Mar 2018 19:24:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-blackmagic/</guid>
      <description>var x = []byte(&amp;quot;Hello World!&amp;quot;) var y = (string)(unsafe.Pointer(&amp;amp;x)) var z = string(x) import ( &amp;quot;reflect&amp;quot; &amp;quot;unsafe&amp;quot; ) func ToString(b []byte) string { return *(*string)(unsafe.Pointer(&amp;amp;b)) } func ToByte(s string) []byte { sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s)) return *(*[]byte)(unsafe.Pointer(sh)) } Go语言黑魔法 今天我要教大家一些无用技能，也可以叫它奇技淫巧或者黑</description>
    </item>
    
    <item>
      <title>go编译生成更小的执行程序</title>
      <link>/language/golang/go-build-ldflags/</link>
      <pubDate>Fri, 30 Mar 2018 15:50:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-build-ldflags/</guid>
      <description>1. 编译最小化可执行文件 尽管go1.7.3编译生成的可执行程序已经很小了,但是通过编译参数控制还能编译出更小的可执行文件，总结如下, 加-ldf</description>
    </item>
    
    <item>
      <title>Go Build</title>
      <link>/language/golang/go-build/</link>
      <pubDate>Fri, 30 Mar 2018 14:44:53 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-build/</guid>
      <description>Golang在Mac、Linux、Windows下如何交叉编译 - LauCyun&#39;s Blog ### 直接在windows下编译arm会报错 CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=7 go build // +build !windows 方式1: env CGO_ENABLED=0 GOOS=linux</description>
    </item>
    
    <item>
      <title>Go Build for windows</title>
      <link>/language/golang/go-build-windows/</link>
      <pubDate>Fri, 30 Mar 2018 14:44:53 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-build-windows/</guid>
      <description>StringFileInfo Windows applications golang编译的exe程序设置图标和右键的详细信息 第一步：Windows 下载MinGW 第二步：新建一个.rc文件，加入文件名为 demo.rc 输入</description>
    </item>
    
    <item>
      <title>Go 交叉编译</title>
      <link>/language/golang/go-build-cross/</link>
      <pubDate>Fri, 30 Mar 2018 14:44:53 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-build-cross/</guid>
      <description>测试： package main import ( &amp;quot;fmt&amp;quot; &amp;quot;runtime&amp;quot; ) func main() { fmt.Printf(&amp;quot;OS: %s\nArchitecture: %s\n&amp;quot;, runtime.GOOS, runtime.GOARCH) } 编译： $ GOOS=darwin GOARCH=386 go build test.go 使用tag和文件后缀的方式实现。 tag方式 tag遵循一下规则 a build tag is evaluated as the OR of space-separated options each</description>
    </item>
    
    <item>
      <title>Golang Url Encode Decode</title>
      <link>/language/golang/go-net-url-encode-decode/</link>
      <pubDate>Thu, 15 Mar 2018 17:35:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-net-url-encode-decode/</guid>
      <description>golang中使用url encoding遇到的小坑 https://stackoverflow.com/questions/13820280/encode-decode-urls Example: Turns &amp;quot;My String&amp;quot; to &amp;quot;My%20String&amp;quot; package urlencode import &amp;quot;net/url&amp;quot; // UrlEncoded encodes a string like Javascript&#39;s encodeURIComponent() func UrlEncoded(str string) (string, error) { u, err := url.Parse(str) if err != nil { return &amp;quot;&amp;quot;, err } return u.String(), nil } Go语</description>
    </item>
    
    <item>
      <title>Golang Istio</title>
      <link>/language/golang/golang-istio/</link>
      <pubDate>Wed, 14 Mar 2018 09:42:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-istio/</guid>
      <description>Istio官方文档中文版 Istio深入解读Service Mesh背后的技术细节 - 网易云 - 博客园</description>
    </item>
    
    <item>
      <title>golang微服务技术栈</title>
      <link>/post/go/go-micro-stack/</link>
      <pubDate>Mon, 12 Mar 2018 17:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/post/go/go-micro-stack/</guid>
      <description>微服务框架: istio 负载均衡：seesaw、caddy 服务网关：tyk、fabio、vulcand 进程间通信：RESTful、RPC、自定义 RES</description>
    </item>
    
    <item>
      <title>Go Signal 优雅的关闭 docker</title>
      <link>/language/golang/go-signal/</link>
      <pubDate>Mon, 12 Mar 2018 09:01:43 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-signal/</guid>
      <description>Linux Signal及Golang中的信号处理 - CSDN博客 最近把 Docker 官方的 Docker Reference 文档又读了一遍，发现有些细节深究起来，还是有很多可挖的。针对写 Doc</description>
    </item>
    
    <item>
      <title>Go 匿名函数 defer 函数</title>
      <link>/language/golang/go-defer/</link>
      <pubDate>Mon, 12 Mar 2018 08:54:03 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-defer/</guid>
      <description>defer关键字 · 深入解析Go 多个 defer 的执行顺序为&amp;quot;后进先出&amp;quot; 所有函数在执行 RET 返回指令之前，都会先检查是否存在 defer 语句，若存</description>
    </item>
    
    <item>
      <title>2017年超有价值的Golang文章</title>
      <link>/language/golang/golang-2017/</link>
      <pubDate>Thu, 04 Jan 2018 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-2017/</guid>
      <description>转自鸟窝 基础语法 Close Channels Gracefully in Golang: 如何优雅地关闭channel? Compile-time assertions in Go: 编译时断言 Why are slices sometimes altered when passed by value in Go?: Go不是按值传递么，怎么slice传入后被更</description>
    </item>
    
    <item>
      <title>golang并发控制WaitGroup</title>
      <link>/language/golang/go-sync-waitgroup/</link>
      <pubDate>Wed, 03 Jan 2018 17:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-sync-waitgroup/</guid>
      <description>封装 waitgroup func (c *Crawler) Stop() { // 1. 匿名函数封装 wg 函数 asyncWaitStop := func(stop func()) { c.wg.Add(1) go func() { stop() c.wg.Done() }() } // 2. 多次执行 函数调用 asyncWaitStop(c.prospectorsReloader.Stop) // Stop prospectors in parallel asyncWaitStop(p.Stop) // 3. 等待执行结束 c.WaitForCompletion() } func (c *Crawler) WaitForCompletion() { c.wg.Wait() } https://github.com/golang/sync/blob/master/errgroup/errgroup.go var g errgroup.Group</description>
    </item>
    
    <item>
      <title>Golang Mysql笔记（三）--- Prepared剖析</title>
      <link>/language/golang/db/sql-prepared/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/sql-prepared/</guid>
      <description>prepare 前面我们已经学习了sql的基本curd操作。总体而言，有两类操作Query和Exec。前者返回数据库记录，后者返回数据库影响或插入相关的结</description>
    </item>
    
    <item>
      <title>Go语言 Redis</title>
      <link>/language/golang/golang-redis/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-redis/</guid>
      <description>Golang redis 操作初体验 （SegmentFault） 安装 我使用的是 https://github.com/go-redis/r... 这个 golang 客户端, 因此安装方式如下: go get gopkg.in/redis.v4 接着在代码中导入此包即可: import &amp;quot;gopkg.in/redis.v4&amp;quot; 基本操作 创建客</description>
    </item>
    
    <item>
      <title>Go语言 ip2location</title>
      <link>/language/golang/golang-ip2location/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-ip2location/</guid>
      <description>github.com/bububa/ip2region-go ### github.com/fiorix/freegeoip docker run --restart=always -p 8080:8080 -d fiorix/freegeoip curl localhost:8080/json/1.2.3.4 ### github.com/ip2location/ip2location-go http://download.ip2location.com/lite/ ``` package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/ip2location/ip2location-go&amp;quot; ) func main(){ ip := &amp;quot;60.213.47.147&amp;quot; ip2location.Open(&amp;quot;/home/ubuntu/go/IP2LOCATION-LITE-DB1.BIN&amp;quot;) fmt.Println(ip2location.Get_country_short(ip).Country_short) } ``` https://github.com/oschwald/geoip2-golang 2. Regional Internet Registry (RIR) file parser &amp;amp; CLI in Go 根据国家代码查询 go get github.com/simcap/rir</description>
    </item>
    
    <item>
      <title>Go语言 proxy</title>
      <link>/language/golang/golang-proxy-user-agent/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-proxy-user-agent/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/corpix/uarand&amp;quot; ) func main() { fmt.Println(uarand.GetRandom()) }</description>
    </item>
    
    <item>
      <title>Go语言 request</title>
      <link>/language/golang/go-http-request/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-request/</guid>
      <description>go get github.com/imroc/req req Go语言人性化HTTP请求库 特性 轻量级 简单 容易操作JSON和XML 容易调试和日志记录 容易上传和下载文件 容易管理Cookie 容易设置代</description>
    </item>
    
    <item>
      <title>Go语言 sql</title>
      <link>/language/golang/db/golang-sql/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/golang-sql/</guid>
      <description>Golang操作数据库 - 纵酒挥刀斩人头 - 博客园 基本概念 Open() – creates a DB Close() - closes the DB Query() - 查询 QueryRow() -查询行 Exec() - 执行操作，update，insert，del</description>
    </item>
    
    <item>
      <title>Go语言 sql</title>
      <link>/language/golang/go-mysql-usage/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-mysql-usage/</guid>
      <description>Golang操作数据库 - 纵酒挥刀斩人头 - 博客园 基本概念 Open() – creates a DB Close() - closes the DB Query() - 查询 QueryRow() -查询行 Exec() -执行操作，update，insert，del</description>
    </item>
    
    <item>
      <title>Go语言 sql增删改查</title>
      <link>/language/golang/db/sql-demo/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/sql-demo/</guid>
      <description>获取所有列 rows, err := db.Query(&amp;quot;SELECT * FROM Players&amp;quot;) defer rows.Close() if err != nil { fmt.Println(err, &amp;quot;ruh roh&amp;quot;) } for rows.Next() { columns, err := rows.Columns() if err != nil { fmt.Print(err) break } for _, c := range columns { fmt.Println(rows.Scan(&amp;amp;c)) } } package main import ( &amp;quot;database/sql&amp;quot; &amp;quot;fmt&amp;quot; _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot; ) func main() { insert() } func insert() { db, err := sql.Open(&amp;quot;mysql&amp;quot;, &amp;quot;root:000000@/test?charset=utf8&amp;quot;)</description>
    </item>
    
    <item>
      <title>Go语言 sql增删改查</title>
      <link>/language/golang/db/sql-query/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/sql-query/</guid>
      <description>I.数据库查询 query(prepare, args) query() 我们了解了数据库连接与连接池。拿到了连接当然就是为了跟数据库交互。对于数据库交互，无怪乎两类操作，读和写。其中怎么读，怎</description>
    </item>
    
    <item>
      <title>Go语言 sql连接与连接池</title>
      <link>/language/golang/db/go-mysql-conn%E8%BF%9E%E6%8E%A5%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/go-mysql-conn%E8%BF%9E%E6%8E%A5%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>最大连接 包含4类 1. 已经建立的连接(正在使用) 2.空闲连接(使用完毕) 3. 新建连接(正在创建) 4. 未创建的连接 错误提示 packets.go:32: unexpected EOFpackets.go:118: write tcp 192.168.3.90:3306: broken pipe 上面都是错误</description>
    </item>
    
    <item>
      <title>Go语言 sql驱动原理解析</title>
      <link>/language/golang/db/go-mysql-dsn/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/go-mysql-dsn/</guid>
      <description>Go 各种数据库连接字符串汇总 数据库操作是一个应用必不可少的部分，但是我们很多时候对golang的sql包仅仅是会用，这是不够的。每一条语句的执</description>
    </item>
    
    <item>
      <title>Go语言 ssh</title>
      <link>/language/golang/golang-ssh/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-ssh/</guid>
      <description>Go ssh 交互式执行命令 - 漠然的博客 SSH Client connection in Golang · Software adventures and thoughts 认证方法 rfc4252 3. 使用ssh agent的公钥认证 为解决每次登陆远程机器都需要输入passphra</description>
    </item>
    
    <item>
      <title>Go语言 正则</title>
      <link>/language/golang/golang-regexp/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-regexp/</guid>
      <description>基础知识 - Golang 中的正则表达式 - GoLove - 博客园 Golang学习 - regexp 包 - GoLove - 博客园 sudo apt-get install libonig-dev import &amp;quot;rubex&amp;quot; rxp := rubex.MustCompile(&amp;quot;[a-z]*&amp;quot;) if err != nil { // whoops } result := rxp.FindString(&amp;quot;a me my&amp;quot;) if result != &amp;quot;&amp;quot; { // FOUND A STRING!! YAY! Must be</description>
    </item>
    
    <item>
      <title>Go语言web框架 gin</title>
      <link>/language/golang/golang-gin/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-gin/</guid>
      <description>安装与配置 框架架构 生命周期 Context 路由 基本路由 路由参数 路由群组 控制器 请求 请求头 Cookies 上传文件 响应 响应头 附加Cookie 字符串响应 JSON响应 视图响应 文</description>
    </item>
    
    <item>
      <title>chromedp 使用详解</title>
      <link>/language/golang/golang-chromedp/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-chromedp/</guid>
      <description>List of Chromium Command Run chrome headless google-chrome --headless --remote-debugging-port=9222 --disable-gpu http://baidu.com ubuntu上大多没有gpu，所以--disable-gpu 测试 curl http://localhost:9222 能够看到调试信息应该就是装好了。 Run chrome by docker docker run -it --rm</description>
    </item>
    
    <item>
      <title>go import用法</title>
      <link>/language/golang/go-import/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-import/</guid>
      <description>import &amp;quot;fmt&amp;quot;最常用的一种形式 import &amp;quot;./test&amp;quot;导入同一目录下test包中的内容 import f &amp;quot;fmt</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>/language/golang/sys/golang/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/golang/</guid>
      <description>go librarys https://golang.org/pkg/ http://go-search.org/ go install curl -O https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz sudo tar -zxf go1.7.3.linux-amd64.tar.gz -C /usr/local 环境变量配置 GOROOT: golang可执行程序本身的路径 export GOROOT=/usr/local/go/bin GOPATH: 当有多个GOPATH时，默认会将go get的内容</description>
    </item>
    
    <item>
      <title>golang json</title>
      <link>/language/golang/go-json/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-json/</guid>
      <description>自定义JSON.Marshal()输出 只需要实现自定义的MarshalJSON()函数就好了,类似fmt的Stringer接口 例子： // Marshaler is the</description>
    </item>
    
    <item>
      <title>golang project</title>
      <link>/language/golang/golang-project/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-project/</guid>
      <description>go 项目汇总 项目精选 [monexec] Go 语言实现的 supervisor monexec lantern 小米监控系统 OpenFalcon 分布式文件系统 IPFS Go 爬虫软件 Pholcus幽灵蛛 OPMS=OA+PMS，项目+办公管理 Go</description>
    </item>
    
    <item>
      <title>golang 中fmt用法</title>
      <link>/language/golang/go-fmt-stringer/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-fmt-stringer/</guid>
      <description>fmt的 Stringer 接口 在fmt/print.go中实现里 Stringer 接口，并对 Stringer 接口进行判断.如果存在自定义的String()接口,则使用自定义的String</description>
    </item>
    
    <item>
      <title>golang 中io包用法（一）</title>
      <link>/language/golang/sys/io1/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/io1/</guid>
      <description>golang 中io包用法（一） 本文转自Golove博客：http://www.cnblogs.com/golove/p/3276678.html ，并在</description>
    </item>
    
    <item>
      <title>golang 中regexp包用法</title>
      <link>/language/golang/sys/regexp/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/regexp/</guid>
      <description>golang 中regexp包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3270918.html regexp 包</description>
    </item>
    
    <item>
      <title>golang 中strconv包用法</title>
      <link>/language/golang/sys/strconv/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/strconv/</guid>
      <description>golang 中strconv包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3262925.html strconv</description>
    </item>
    
    <item>
      <title>golang 中unicode源码解析</title>
      <link>/language/golang/sys/unicode/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/unicode/</guid>
      <description>// Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. // go/src/unicode/utf8/utf8.go // version 1.7 // 关于 UTF-8 编码方式请参考：http://www.cnblogs.com/</description>
    </item>
    
    <item>
      <title>golang 基础知识</title>
      <link>/language/golang/golang/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang/</guid>
      <description>golang – 峰云就她了 Golang笔记 解决编程问题 Golang知识库 Cyeam golanger/Golang学习笔记 代理实现(1) goproxy https://golang.org/cmd/go/#hdr-Module_proxy_protocol 我推荐几个代理地址： https://goproxy.io</description>
    </item>
    
    <item>
      <title>golang 常用库</title>
      <link>/language/golang/golang-cli/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-cli/</guid>
      <description>##go 语言包 time 命令行 https://github.com/urfave/cli.git 主函数 ./main.go package main import ( &amp;quot;os&amp;quot; &amp;quot;github.com/rinetd/transfer/cmd&amp;quot; ) func main() { if err := cmd.Run(); err != nil { os.Exit(0) } } 子目录 ./cmd/root.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;github.com/urfave/cli&amp;quot; ) func Run() error { app := cli.NewApp() app.Name = `Transfer` app.Email = &amp;quot;https://github.com/rinetd&amp;quot; app.Usage = `Translate YAML, JSON, TOML, HCL, XML, properties ... transfer</description>
    </item>
    
    <item>
      <title>golang中archive-tar包用法</title>
      <link>/language/golang/sys/archive_tar/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/archive_tar/</guid>
      <description>备份mysql时，想把之前的文件压缩，但是用tar czvf /data/backup/test.tar.gz /data/a/b/directory 打开一看，里面的内容是把整个绝对路径都放进去了。 如果想实现相对路径，这样写就可以解决</description>
    </item>
    
    <item>
      <title>golang中archive-zip包用法</title>
      <link>/language/golang/sys/archive_zip/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/archive_zip/</guid>
      <description>golang中archive/zip包用法 archive/zip包提供了zip归档文件的读写操作。 在对zip包进行介绍之前，先说明一下zip</description>
    </item>
    
    <item>
      <title>golang中bufio包的用法</title>
      <link>/language/golang/sys/bufio/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/bufio/</guid>
      <description>使用bufio处理TCP粘包问题 Go按行读取数据的坑 · Issue #10 · ma6174/blog 判断是否是空白字符: unicode.IsSpace() bufio.Reader 结构体中所有读取数据的方法，都包含了delim分隔符，</description>
    </item>
    
    <item>
      <title>golang中builtin包说明</title>
      <link>/language/golang/sys/builtin/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/builtin/</guid>
      <description>golang中builtin包说明 builtin包是go的预声明定义，包括go语言中常用的各种类型和方法声明，包括变量和常量两部分．其详细声</description>
    </item>
    
    <item>
      <title>golang中bytes包用法</title>
      <link>/language/golang/sys/bytes/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/bytes/</guid>
      <description>golang中bytes包用法 // bytes 包实现了用于操作 []byte 的函数，类似于 strings 包中的函数 // bytes.go // Compare 用于比较两个 []byte，并返回 int 型结果 // a == b 返回 0</description>
    </item>
    
    <item>
      <title>golang中container-heap包用法</title>
      <link>/language/golang/sys/container_heap/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/container_heap/</guid>
      <description>golang中container/heap包用法 heap包对任意实现了heap接口的类型提供堆操作。（小根）堆是具有“每个节点都是以其为根的</description>
    </item>
    
    <item>
      <title>golang中container-list包中的坑</title>
      <link>/language/golang/sys/container_list/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/container_list/</guid>
      <description>golang中container/list包中的坑 golang中list包用法可以参看http://blog.csdn.net/chenba</description>
    </item>
    
    <item>
      <title>golang中container-list包用法</title>
      <link>/language/golang/sys/container_list0/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/container_list0/</guid>
      <description>golang中container/list包用法 list是一个双向链表。该结构具有链表的所有功能。 type Element type Element struct { Value interface{} //在元素中存储的值 } func (e</description>
    </item>
    
    <item>
      <title>golang中container-ring包用法</title>
      <link>/language/golang/sys/container_ring/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/container_ring/</guid>
      <description>golang中container/ring包用法 ring包实现了环形链表的操作。 type Ring //Ring类型代表环形链表的一个元素，同时也代表链表本</description>
    </item>
    
    <item>
      <title>golang中image-color包的用法</title>
      <link>/language/golang/sys/image_color/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/image_color/</guid>
      <description>golang中image/color包的用法 color包是image包对于color重点介绍，实现了基本的颜色库 color中定义了如下几个变</description>
    </item>
    
    <item>
      <title>golang中image-draw包用法</title>
      <link>/language/golang/sys/image_draw/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/image_draw/</guid>
      <description>golang中image/draw包用法 draw包提供了图片的生成方法，或者绘制方法．其使用方法只需导入响应的包即可＂import image/draw&amp;quot; func Draw(dst Image, r</description>
    </item>
    
    <item>
      <title>golang中image-gif包用法</title>
      <link>/language/golang/sys/image_gif/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/image_gif/</guid>
      <description>gif包实现了gif图片的解码及编码 func Decode(r io.Reader) (image.Image, error) //Decode从r中读取一个GIF图像，然后返回的image.Image是第一个嵌入的图。 func</description>
    </item>
    
    <item>
      <title>golang中image-jpeg包和image-png包用法</title>
      <link>/language/golang/sys/image_jpg_png/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/image_jpg_png/</guid>
      <description>golang中image/jpeg包和image/png包用法 jpeg包实现了jpeg图片的编码和解码 func Decode(r io.Reader) (image.Image, error) //Decode读取一个jp</description>
    </item>
    
    <item>
      <title>golang中image包用法</title>
      <link>/language/golang/sys/image/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/image/</guid>
      <description>### golang中image包用法 image包实现了一个基本的2D图像库，该包中包含基本的接口叫做image，这个里面包含color，这个将在</description>
    </item>
    
    <item>
      <title>golang中io-ioutil包用法</title>
      <link>/language/golang/sys/io_ioutil/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/io_ioutil/</guid>
      <description>golang中io/ioutil包用法 // ioutil.go // ReadAll 读取 r 中的所有数据 // 返回读取的数据和读取过程中遇到的任何错误 // 如果读取成功，则 err 返回 nil，而</description>
    </item>
    
    <item>
      <title>golang中io包用法（二）</title>
      <link>/language/golang/sys/io/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/io/</guid>
      <description>golang中io包用法（二） 本文转自https://github.com/polaris1119/The-Golang-Standard-</description>
    </item>
    
    <item>
      <title>golang中io包用法（二）</title>
      <link>/language/golang/sys/io2/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/io2/</guid>
      <description>golang中io包用法（二） 本文转自https://github.com/polaris1119/The-Golang-Standard-</description>
    </item>
    
    <item>
      <title>golang中net-http包用法</title>
      <link>/language/golang/sys/net_http/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/net_http/</guid>
      <description>golang中net/http包用法 http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HT</description>
    </item>
    
    <item>
      <title>golang中net-mail包用法</title>
      <link>/language/golang/sys/net_mail/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/net_mail/</guid>
      <description>golang中net/mail包用法 net/mail包实现了解析邮件消息的功能 本包大部分都遵守RFC 5322规定的语法，值得注意的区别是： 旧</description>
    </item>
    
    <item>
      <title>golang中net包用法(三)--TCP和UDP以及Unix domain socket</title>
      <link>/language/golang/sys/net_socket/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/net_socket/</guid>
      <description>golang中net包用法(三)--TCP和UDP以及Unix domain socket type TCPAddr //表示TCP终端地址 type TCPAddr struct { IP IP Port int Zone string // IPv6寻址范围 } func ResolveTCPAddr(net, addr string)</description>
    </item>
    
    <item>
      <title>golang中net包用法(二)--IP</title>
      <link>/language/golang/sys/net_ip/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/net_ip/</guid>
      <description>golang中net包用法(二)--IP IP地址（Internet Protocol Address，称为互联网协议地址，简写为IP Address），是一种给</description>
    </item>
    
    <item>
      <title>golang中net包用法（一）</title>
      <link>/language/golang/sys/net/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/net/</guid>
      <description>golang中net包用法（一） net包对于网络I/O提供了便携式接口，包括TCP/IP,UDP，域名解析以及Unix Socket。尽管ne</description>
    </item>
    
    <item>
      <title>golang中os-exec包用法</title>
      <link>/language/golang/sys/os_exec/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/os_exec/</guid>
      <description>golang中os/exec包用法 简介：exec包用于执行外部命令。它包装了os.StartProcess函数以便更容易的修正输入和输出，使</description>
    </item>
    
    <item>
      <title>golang中os-signal包的使用</title>
      <link>/language/golang/sys/os_signal/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/os_signal/</guid>
      <description>golang中os/signal包的使用 os/signal包实现对信号的处理 golang中对信号的处理主要使用os/signal包中的两个方</description>
    </item>
    
    <item>
      <title>golang中os-user包用法</title>
      <link>/language/golang/sys/os_user/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/os_user/</guid>
      <description>golang中os/user包用法 os/user包允许用户账号通过用户名或者用户id查找用户 type UnknownUserError type UnknownUserError string func (e UnknownUserError) Error() string //当通过lookup无法查</description>
    </item>
    
    <item>
      <title>golang中os包用法</title>
      <link>/language/golang/sys/os/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/os/</guid>
      <description>golang中os包用法 os包中实现了平台无关的接口，设计向Unix风格，但是错误处理是go风格，当os包使用时，如果失败之后返回错误类型而</description>
    </item>
    
    <item>
      <title>golang中sort包用法</title>
      <link>/language/golang/sys/sort/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/sort/</guid>
      <description>golang中sort包用法 golang中也实现了排序算法的包sort包． sort包中实现了３种基本的排序算法：插入排序．快排和堆排序．和其</description>
    </item>
    
    <item>
      <title>golang中strings包用法</title>
      <link>/language/golang/sys/strings/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/strings/</guid>
      <description>golang中strings包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3236300.</description>
    </item>
    
    <item>
      <title>golang中sync.RWMutex和sync.Mutex区别</title>
      <link>/language/golang/sys/sync/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/sync/</guid>
      <description>golang中sync.RWMutex和sync.Mutex区别 版权声明：本文为博主原创文章，未经博主允许不得转载。 golang中sync包</description>
    </item>
    
    <item>
      <title>golang中time包用法</title>
      <link>/language/golang/sys/time/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/time/</guid>
      <description>golang的时区和神奇的time.Parse - 简书 时间点与时间段：Time,Duration。好比MVC中的M。 时 区：Location，在</description>
    </item>
    
    <item>
      <title>golang中并发sync和channel</title>
      <link>/language/golang/sys/sync_channel/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/sys/sync_channel/</guid>
      <description>golang中并发sync和channel golang中实现并发非常简单，只需在需要并发的函数前面添加关键字＂go&amp;quot;，但是如何处理</description>
    </item>
    
    <item>
      <title>golang扩展 tyk</title>
      <link>/language/golang/golang-api-tyk/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-api-tyk/</guid>
      <description>http://www.cnblogs.com/lazio10000/p/5281905.html</description>
    </item>
    
    <item>
      <title>golang查询MySQL中datetime字段问题</title>
      <link>/language/golang/db/go-mysql-datetime/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/db/go-mysql-datetime/</guid>
      <description>https://studygolang.com/articles/04318 以前一直用 int 存储 unix 时间字段，这次和其他组交互时出现在时间问题。长话短说，这和 Python 查询 MySQL 一样，对于 datetime 默认会使用 UTC 时间，但是国内是东八区，也就是</description>
    </item>
    
    <item>
      <title>ip</title>
      <link>/language/golang/golang-ip/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-ip/</guid>
      <description>timezone https://timezonedb.com/download https://www.ip2location.com/free/zipcode-metro https://github.com/rxliuli/v2rayBackup/blob/master/tools/geoip/geoip_gen.go github.com/G-Core/geodns # 国家 区域 Locale timezone gmt_offset Alpha2: &amp;quot;LB&amp;quot;, Alpha3: &amp;quot;LBN&amp;quot;, CountryCode: &amp;quot;961&amp;quot;, China Postal Code (中国邮政编码): Time Zone America/Los_Angeles GMT Offset UTC/GMT -8.00 hours DST No City San Mateo Region California Country United States 互联网的IP地址和AS号码分配是分级进行的</description>
    </item>
    
    <item>
      <title>文件上传</title>
      <link>/language/golang/fileupload/watfile/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/fileupload/watfile/</guid>
      <description>https://github.com/cmalekpour/watfile</description>
    </item>
    
    <item>
      <title>通用SQL命令行工具 usql</title>
      <link>/language/golang/golang-tool-usql/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-tool-usql/</guid>
      <description>通用SQL命令行工具 usql More coming soon! Build/Install from Source You can build or install usql from source in the usual Go fashion: install usql (includes support for PosgreSQL, MySQL, SQLite3, and MS SQL) $ go get -u github.com/knq/usql install all drivers $ go get -u -tags all github.com/knq/usql install with &amp;quot;most&amp;quot; drivers (same as &amp;quot;all&amp;quot; but excludes oracle/odbc) $ go get -u</description>
    </item>
    
    <item>
      <title>Golang-字体-FreeType-go</title>
      <link>/language/golang/golang-%E5%AD%97%E4%BD%93-freetype-go/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/golang-%E5%AD%97%E4%BD%93-freetype-go/</guid>
      <description>FreeType库（http://www.freetype.org/）是一个完全免费(开源)的、高质量的且可移植的字体引擎 它提供统一的接口来</description>
    </item>
    
  </channel>
</rss>