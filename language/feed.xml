<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Languages on 时光小栈</title>
    <link>/language/</link>
    <description>Recent content in Languages on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 09 Nov 2019 13:52:50 +0800</lastBuildDate>
    
	<atom:link href="/language/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cmake</title>
      <link>/language/cpp/cmake/</link>
      <pubDate>Sat, 09 Nov 2019 13:52:50 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/cpp/cmake/</guid>
      <description>&lt;p&gt;CMAKE_CURRENT_SOURCE_DIR&lt;br /&gt;
这是当前处理的CMakeLists.txt所在的目录&lt;/p&gt;

&lt;p&gt;CMAKE_CURRENT_LIST_DIR&lt;br /&gt;
(自2.8.3开始)这是当前正在处理的列表文件的目录&lt;/p&gt;

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;前面的文章介绍了一个最简单的CMake工程，这篇文章将介绍一个稍微复杂一些的CMake工程，结合这个工程总结一下在组织一个C/C++工程时最为常用的一些CMake命令和变量。对于涉及到的命令和变量，介绍的原则是点到即止，先仅需掌握基本用法即可，让工程跑起来。&lt;/p&gt;

&lt;p&gt;上一篇文章中那个最简单的CMake Hello World工程，在其CMake脚本文件CMakeLists.txt中，仅有一句话：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```c
add_executable(hello hello.cpp)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面的&lt;code&gt;add_executable&lt;/code&gt;就是一个CMake命令，它的作用是添加一个可执行文件构建目标。&lt;/p&gt;

&lt;p&gt;下面从一个C++应用程序的编译过程为脉络对涉及到的命令和变量进行说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boost</title>
      <link>/language/cpp/boost/</link>
      <pubDate>Wed, 06 Nov 2019 15:17:38 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/cpp/boost/</guid>
      <description>sudo apt-get install --no-install-recommends libboost-all-dev /usr/bin/ld: cannot find -lboost_python ln -s /usr/local/lib/libboost_python27.so /usr/local/lib/libboost_python.so 卸载源码编译的boost库，需要删除: 1.安装路径的boost； 2. /usr/local/include/路径下的b</description>
    </item>
    
    <item>
      <title>gcc</title>
      <link>/language/clang/gcc/</link>
      <pubDate>Thu, 23 May 2019 10:58:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/gcc/</guid>
      <description>linux ldconfig命令,环境变量文件配置详解 - winycg的博客 - CSDN博客 linux下动态库安装 /etc/ld.so.conf.d/libc.conf 安装了该共享库, 但执行需要调用该共享库</description>
    </item>
    
    <item>
      <title>c void</title>
      <link>/language/clang/c-void/</link>
      <pubDate>Wed, 22 May 2019 19:17:38 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-void/</guid>
      <description>C语言中void和NULL - ascend的专栏 - CSDN博客 #define NULL ((void *)0) void的作用 a. 对函数参数的限定：当不需要传入参数时，即 function (void); b. 对函数返回</description>
    </item>
    
    <item>
      <title>Linux内核中的offsetof和container_of</title>
      <link>/language/clang/c-container_of/</link>
      <pubDate>Sat, 20 Apr 2019 09:26:47 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-container_of/</guid>
      <description>关于list_for_each_entry相关函数 - 简书 链表是内核最经典的数据结构之一，说到链表就不得不提及内核最经典 (没有之一) 的宏con</description>
    </item>
    
    <item>
      <title>c位操作</title>
      <link>/language/clang/c-bit-operate/</link>
      <pubDate>Fri, 19 Apr 2019 16:29:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-bit-operate/</guid>
      <description>位运算技巧 记得iOS总有一道面试题在不使用第三个变量的情况下交换两个变量的值，这里用到异或的上面加解密中的特性。我有x、y两个个变量，做如下</description>
    </item>
    
    <item>
      <title>c语言define的使用方法总结</title>
      <link>/language/clang/c-define/</link>
      <pubDate>Fri, 19 Apr 2019 11:13:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-define/</guid>
      <description>#和##有什么区别？ 他们都不会将参数进行展开 1. # 的作用是将宏定义中的参数转换成“字符串” #define STR(x) #x =&amp;gt; a=1; STR(a) &amp;quot;a&amp;quot; 2. ##的作用是将宏定义中的参数变成字符</description>
    </item>
    
    <item>
      <title>C语言中的指针</title>
      <link>/language/clang/c-point/</link>
      <pubDate>Sat, 13 Apr 2019 10:15:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-point/</guid>
      <description>直接对物理地址0x5a000赋值 *((int *)0x5a0000) =0x01 将一个地址变成函数并调用 #define POWERDOWN(clk) ((void(*)(int))0x00000020)(clk) int main(){ int addr; 定义一个变量用来存放地址 addr = (int)test; 将一个函数的入口地址转换成int 存</description>
    </item>
    
    <item>
      <title>javascript技巧</title>
      <link>/language/node/node-js-hacker/</link>
      <pubDate>Wed, 20 Mar 2019 15:36:37 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/node/node-js-hacker/</guid>
      <description>原文地址 https://juejin.im/post/5c8dbe1e51882523390a7019 因为球是圆的，所以不论发生什么都有可能，对这点我是深信不疑的，但最近我总是在怀疑，JavaScript 也是圆的！ 什么是 “黑话” 黑话</description>
    </item>
    
    <item>
      <title>nodejs中 exports、module.exports 和 export、export default 到底是咋回事</title>
      <link>/language/node/node-es6-export-import/</link>
      <pubDate>Wed, 20 Mar 2019 14:56:09 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/node/node-es6-export-import/</guid>
      <description>原文地址 https://juejin.im/post/597ec55a51882556a234fcef 从 exports 和 module.exports 说起 - 前端 - 掘金 node.js中exports与module.exports的区别分析 - 掘金 前言 难得有空，今天开始重新规范</description>
    </item>
    
    <item>
      <title>Node中没搞明白require和import，你会被坑的很惨</title>
      <link>/language/node/node-require-import/</link>
      <pubDate>Wed, 13 Mar 2019 16:30:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/node/node-require-import/</guid>
      <description>Node中没搞明白require和import，你会被坑的很惨 - 腾讯Web前端 IMWeb 团队社区 ES6 export &amp;amp;&amp;amp; export default 差异总结 - 掘金 ES6 标准发布后，module 成</description>
    </item>
    
    <item>
      <title>Bbs</title>
      <link>/language/bbs/</link>
      <pubDate>Sat, 16 Jun 2018 16:03:18 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/bbs/</guid>
      <description>b3log/symphony 环境准备 安装 JDK，版本至少需要 JDK8 安装 MySQL，版本至少需要 5.6 安装 Tomcat，版本至少需要 9 安装 Maven，下载解压后设置 bin 目录到 PATH 环</description>
    </item>
    
    <item>
      <title>Sns</title>
      <link>/language/sns/</link>
      <pubDate>Sat, 16 Jun 2018 15:55:16 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/sns/</guid>
      <description>misskey https://misskey.xyz/deck 类似facebook的社交化平台</description>
    </item>
    
    <item>
      <title>C语言的奇技淫巧</title>
      <link>/language/clang/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</link>
      <pubDate>Tue, 29 Mar 2016 21:25:45 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</guid>
      <description>位运算技巧 求结构体成员的偏移 #define OFFSET(structure, member) ((int) &amp;amp;((structure *)0)-&amp;gt;member) c语言 x[n] 相当于 *((x)+(n)) 所以 x[n] 和 n[x] 结果一样 编译期类型检查: (void)(&amp;amp;a == &amp;amp;b)检测a和b是不是同一类型，不是同</description>
    </item>
    
    <item>
      <title>Linux命令 Composer</title>
      <link>/language/composer/</link>
      <pubDate>Tue, 29 Mar 2016 20:57:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/composer/</guid>
      <description>中国全量镜像 修改composer Packagist 镜像 全局设置: composer config -g repo.packagist composer https://packagist.phpcomposer.com 单个项目: composer config repo.packagist composer https://packagist.phpcomposer.com 更新composer composer selfupdate 安装composer Linux : sudo apt install composer --no-install-recommends curl</description>
    </item>
    
    <item>
      <title>ruby</title>
      <link>/language/ruby/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/ruby/</guid>
      <description>Ruby特殊变量： $: = default search path (array of paths) $. 解释器最近读的行数(line number) $! 最近一次的错误信息 $@ 错误产生的位置 $_ gets最近读的字符串 $&amp;amp; 最近一次与正</description>
    </item>
    
    <item>
      <title>vagrant</title>
      <link>/language/vagrant/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/vagrant/</guid>
      <description>virtual box extend 下载地址 https://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html 初步 Install downloads aria2c -c -x 10 https://releases.hashicorp.com/vagrant/1.9.3/vagrant_1.9.3_x86_64.deb sudo dpkg -i vagrant_1.9.3_x86_64.deb 配置代理 Install proxyconf: vagrant plugin install vagrant-proxyconf Configure your Vagrantfile: vi $HOME/.vagrant.d/Vagrantfile config.proxy.http = &amp;quot;http://127.0.0.1:8087&amp;quot; config.proxy.https = &amp;quot;http://127.0.0.1:8087&amp;quot; config.proxy.no_proxy = &amp;quot;localhost,127.0.0.1&amp;quot; 在官网https://www.vagrantup.</description>
    </item>
    
    <item>
      <title>工具软件 node yarn</title>
      <link>/language/node-yarn/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/node-yarn/</guid>
      <description>比较详细的npm命令查看 registry = http://registry.npm.taobao.org/ #淘宝npm镜像 配置国内镜像 yarn config set registry https://registry.npm.taobao.org 忽略node版本 yarn config set ignore-engines true chromedriver : Saving to 安装卡住 yarn config set &amp;quot;chromedriver_cdnurl&amp;quot; &amp;quot;https://npm.taobao.org/mirrors/chromedriver&amp;quot; yarn config set phantomjs_cdnurl https://npm.taobao.org/dist/phantomjs yarn config set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver</description>
    </item>
    
    <item>
      <title>工具软件 npm</title>
      <link>/language/node-npm/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/node-npm/</guid>
      <description>nvm Install creationix/nvm: Node Version Manager nvm-linux-install nvm-windows-install npm配置镜像、设置代理 registry = http://registry.npmjs.org/ #官方npm镜像 registry = http://registry.npm.taobao.org/ #淘宝npm镜像 registry = http://npmreg.mirrors.ustc.edu.cn/ yarn config set registry https://registry.npm.taobao.org 永久生效 registry npm config set registry https://registry.npm.taobao.org 临时使用 registry npm --registry https://registry.npm.taobao.org install yarn</description>
    </item>
    
    <item>
      <title>工具软件 npm</title>
      <link>/language/npm-package.json/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/npm-package.json/</guid>
      <description>package.json文件 -- JavaScript 标准参考教程（alpha） Node环境变量 process.env 的那些事儿 - JS那些事儿 - SegmentFault 思否 通过环境变量传递参数 js 中 process.env 是读取</description>
    </item>
    
    <item>
      <title>强大的管理web包管理工具 bower</title>
      <link>/language/bower/</link>
      <pubDate>Thu, 24 Mar 2016 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/bower/</guid>
      <description>先安装bower(确保先有node环境) npm install bower -g</description>
    </item>
    
    <item>
      <title>javascript better practice</title>
      <link>/language/javascript-better-practice/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/javascript-better-practice/</guid>
      <description>null 把 null 理解为对象的占位符。 可以使用 null 的场景： 用来初始化变量，该变量可能赋值为一个对象 用来和一个已经初始化的变量比较，这个变量可以是也可以不是</description>
    </item>
    
    <item>
      <title>javascript 标准参考</title>
      <link>/language/javascript/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/javascript/</guid>
      <description>JavaScript 标准参考教程-阮一峰 操作符 布尔操作符 逻辑非 逻辑非操作符用叹号表示 ！ 可以应用于任何数据类型，逻辑非操作符首先会把操作数转换为布尔值，然后再求</description>
    </item>
    
    <item>
      <title>C语言深度解剖 (一)</title>
      <link>/language/clang/c-sizeofsignedunsignedvoid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-sizeofsignedunsignedvoid/</guid>
      <description>前言 C语言的水深不见底，好在一些前辈们已经将很多雷区探了一遍 这里分享一下我在学习 《C语言深度解剖》 过程中的一些笔记和心得 概要 TOC {:toc} sizeof sizeo</description>
    </item>
    
    <item>
      <title>C语言深度解剖 (三)</title>
      <link>/language/clang/c-typedef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-typedef/</guid>
      <description>前言 C语言的水深不见底，好在一些前辈们已经将很多雷区探了一遍 这里分享一下我在学习 《C语言深度解剖》 过程中的一些笔记和心得 概要 TOC {:toc} typedef typedef 从字面上</description>
    </item>
    
    <item>
      <title>C语言深度解剖 (二)</title>
      <link>/language/clang/c-constvolatileunionenum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/c-constvolatileunionenum/</guid>
      <description>前言 C语言的水深不见底，好在一些前辈们已经将很多雷区探了一遍 这里分享一下我在学习 《C语言深度解剖》 过程中的一些笔记和心得 概要 TOC {:toc} const 准确来说 const</description>
    </item>
    
    <item>
      <title>C语言深度解剖 (五)</title>
      <link>/language/clang/-c%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%89%96-%E4%BA%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/-c%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%89%96-%E4%BA%94/</guid>
      <description>前言 C语言的水深不见底，好在一些前辈们已经将很多雷区探了一遍 这里分享一下我在学习 《C语言深度解剖》 过程中的一些笔记和心得 概要 TOC {:toc} 数组参数与指</description>
    </item>
    
    <item>
      <title>C语言深度解剖 (四)</title>
      <link>/language/clang/-c%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%89%96-%E5%9B%9B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/clang/-c%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%89%96-%E5%9B%9B/</guid>
      <description>前言 C语言的水深不见底，好在一些前辈们已经将很多雷区探了一遍 这里分享一下我在学习 《C语言深度解剖》 过程中的一些笔记和心得 概要 TOC {:toc} 指针与数组 #include</description>
    </item>
    
  </channel>
</rss>