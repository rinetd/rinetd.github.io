<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 时光小栈</title>
    <link>/tags/javascript/</link>
    <description>Recent content in javascript on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 07 Nov 2017 18:55:24 +0000</lastBuildDate>
    
	<atom:link href="/tags/javascript/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript原生数组及高阶函数</title>
      <link>/frontend/js/javascript%E5%8E%9F%E7%94%9F%E6%95%B0%E7%BB%84%E5%8F%8A%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 07 Nov 2017 18:55:24 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/javascript%E5%8E%9F%E7%94%9F%E6%95%B0%E7%BB%84%E5%8F%8A%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>一、map map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果 callback 函数会被自动传入三个参数：数组元素，元素索引，原</description>
    </item>
    
    <item>
      <title>ES6新特性</title>
      <link>/frontend/js/es6-js%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 29 Mar 2017 20:57:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/es6-js%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>一、作用域 块级作用域 块级变量let 块级常量 const 二、箭头函数 sum = (a,b)=&amp;gt; a + b nums.forEach(v=&amp;gt; {console.log(v)}) 词法 this 三、参数处理 默认参数值 剩余参数 展开运算符 四、模板字面量 多行字符</description>
    </item>
    
    <item>
      <title>ES6编码风格</title>
      <link>/frontend/js/es6-js-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 29 Mar 2017 20:57:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/es6-js-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</guid>
      <description>一、块级作用域 1.1 let取代var ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而</description>
    </item>
    
    <item>
      <title>JavaScript作用域分析总结</title>
      <link>/frontend/js/js-javascript%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 10 Jan 2017 12:50:43 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-javascript%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&#34;http://blog.poetries.top/2017/01/10/js-scope&#34; target=&#34;_blank&#34;&gt;http://blog.poetries.top/2017/01/10/js-scope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;一-js解析顺序和作用域&#34;&gt;一、JS解析顺序和作用域：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;解析顺序：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;定义 (1. 先找&lt;code&gt;var&lt;/code&gt;  &lt;code&gt;function&lt;/code&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;执行 (2. 再逐步执行)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;注意:如果函数名和&lt;code&gt;var&lt;/code&gt;定义的变量相同，&lt;code&gt;var&lt;/code&gt;会被函数覆盖&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;作用域：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;每个&lt;code&gt;script&lt;/code&gt;是一个作用域&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每个函数&lt;code&gt;{}&lt;/code&gt;是一个作用域&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;程序每执行到一个作用域，都是按照解析顺序解析代码;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;作用域链:从内往外找要找函数内的变量;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JS常用的内置函数整理</title>
      <link>/frontend/js/js-functions-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 13 Dec 2016 14:50:24 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-functions-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h3 id=&#34;string字符串对象&#34;&gt;String字符串对象&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt; 属性 长度&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat(String)&lt;/code&gt; 连接两个或更多个字符&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf(string)&lt;/code&gt; 返回出现字符的位置&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr(num1,[num2])&lt;/code&gt;截取字符串&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;转成小写&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;转成大写&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace(str1,str2)&lt;/code&gt; 字符串替换&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ajax总结篇</title>
      <link>/frontend/jquery/ajax%E6%80%BB%E7%BB%93%E7%AF%87/</link>
      <pubDate>Sat, 26 Nov 2016 14:35:24 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/jquery/ajax%E6%80%BB%E7%BB%93%E7%AF%87/</guid>
      <description>原文出处 http://blog.poetries.top/2016/11/26/Ajax-summary 本文主要总结整理Ajax的一些常用的基础知识，适合初学者。 一、Ajax简介、优劣势、应用场景以及技术 Ajax简介 : Asynchronous Javascript And XML （异步的</description>
    </item>
    
    <item>
      <title>jQuery笔记总结篇</title>
      <link>/frontend/jquery/jquery-%E6%80%BB%E7%BB%93%E7%AF%87/</link>
      <pubDate>Thu, 20 Oct 2016 09:35:08 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/jquery/jquery-%E6%80%BB%E7%BB%93%E7%AF%87/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&#34;http://blog.poetries.top/2016/10/20/review-jQuery&#34; target=&#34;_blank&#34;&gt;http://blog.poetries.top/2016/10/20/review-jQuery&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先，来了解一下&lt;code&gt;jQuery&lt;/code&gt;学习的整体思路&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xq6al.com1.z0.glb.clouddn.com/jquery1.png&#34; alt=&#34;jQuery系统学习篇&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript中property和attribute的区别</title>
      <link>/frontend/js/js-dom-property%E5%92%8Cattribute%E7%9A%84%E5%8C%BA%E5%88%AB-/</link>
      <pubDate>Wed, 27 Jul 2016 13:50:20 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-dom-property%E5%92%8Cattribute%E7%9A%84%E5%8C%BA%E5%88%AB-/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1. 定义&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;（元素属性）：&lt;code&gt;DOM&lt;/code&gt; 节点是一个对象，因此，可以添加自定义的属性以及方法。&lt;code&gt;property&lt;/code&gt; 的值可以是任何的数据类型，对大小写敏感。自定义的&lt;code&gt;property&lt;/code&gt;不会出现在 &lt;code&gt;html&lt;/code&gt; 中，只存在 &lt;code&gt;JavaSctipt&lt;/code&gt; 中。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attribute&lt;/code&gt;（标签属性）：&lt;code&gt;attribute&lt;/code&gt; 只能是字符串，大小写不敏感，出现在 &lt;code&gt;innerHTML&lt;/code&gt; 中，通过类数组&lt;code&gt;attributes&lt;/code&gt;可以罗列所有的 &lt;code&gt;attribute&lt;/code&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2. 相同之处&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jQuery与原生JS的DOM操作对比</title>
      <link>/frontend/jquery/jquery%E4%B8%8E%E5%8E%9F%E7%94%9Fjs%E7%9A%84dom%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94-/</link>
      <pubDate>Wed, 27 Jul 2016 13:50:20 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/jquery/jquery%E4%B8%8E%E5%8E%9F%E7%94%9Fjs%E7%9A%84dom%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94-/</guid>
      <description>&lt;h3 id=&#34;1-创建元素节点&#34;&gt;1. 创建元素节点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;原生JS创建元素节点: &lt;code&gt;document.createElement(&amp;quot;p&amp;quot;);&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;jQuery创建元素节点：&lt;code&gt;$(&#39;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&#39;);&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JavaScript与Unicode编码</title>
      <link>/frontend/js/js-encode-unicode/</link>
      <pubDate>Wed, 27 Jul 2016 11:40:43 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-encode-unicode/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;字符集的概念：&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;字符集：就是--编码--&amp;gt;字符的映射&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JavaScript中三种绑定事件的方式与去除绑定</title>
      <link>/frontend/js/js-event-onclick/</link>
      <pubDate>Wed, 27 Jul 2016 11:40:43 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-event-onclick/</guid>
      <description>window.addEventListener(&#39;wheel&#39;, function (e) { // firstScrollStatus(e, &#39;wheel&#39;); e.stopPropagation(); e.preventDefault(); }, { passive: false }); const items = document.querySelector(&amp;quot;#items&amp;quot;); right.addEventListener(&amp;quot;click&amp;quot;, function() { loop(&amp;quot;right&amp;quot;); }); left.addEventListener(&amp;quot;click&amp;quot;, function() { loop(&amp;quot;left&amp;quot;); }); function loop(direction) { if (direction === &amp;quot;right&amp;quot;) { items.appendChild(items.firstElementChild); } else { items.insertBefore(items.lastElementChild, items.firstElementChild); } } 绑定事件的第1种办法： 函数写在结构层里面 非常不好，使</description>
    </item>
    
    <item>
      <title>JavaScript中三种绑定事件的方式与去除绑定</title>
      <link>/frontend/js/js-event-onscroll/</link>
      <pubDate>Wed, 27 Jul 2016 11:40:43 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-event-onscroll/</guid>
      <description>How to develop high performance onScroll event? javascript - window.onscroll无法刷新scrollTop的值？ - SegmentFault 思否 return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0; scrolltop = (((t = document.documentElement) || (t = document.body.parentNode)) typeof t.scrollTop == ‘numbe</description>
    </item>
    
    <item>
      <title>JavaScript之定时器</title>
      <link>/frontend/js/js-timer-settimeout-setinterval/</link>
      <pubDate>Wed, 27 Jul 2016 11:40:43 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-timer-settimeout-setinterval/</guid>
      <description>&lt;h3 id=&#34;setinterval和settimeout的区别&#34;&gt;setInterval和setTimeout的区别，&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  setTimeout(function(){
    /* Some long block of code... */
    setTimeout(arguments.callee, 10);
  }, 10);
 
  setInterval(function(){
    /* Some long block of code... */
  }, 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看第一眼，会觉得这两段代码功能相同，实际上，他们是不同的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   需要注意到，setTimeout的回调函数的执行总是保证了至少10ms的间隔（与上一个回调的执行相比，实际执行时，这个间隔可能变长，但是不可能更少），但是setInterval会尝试每隔10ms执行一次回调，不管上一个回调函数时候已经执行完毕。（很多类库的动画都是使用的setTimeout实现）
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;window定时器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setIntval&lt;/code&gt;(表达式,毫秒)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearIntval&lt;/code&gt;(定时器对象)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt;(表达式,毫秒)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearTimeout&lt;/code&gt;(定时器对象)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>CLNDR.js中文文档</title>
      <link>/post/reship/clndr.js-doc/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/post/reship/clndr.js-doc/</guid>
      <description>CLNDR 是一个jQuery日历插件。由于缺少真正动态的前端日历插件，无奈之下，创作了CLNDR。 查看demo: kylestetz.github.io/CLNDR/ 下载 依赖 使用Bower 结合Angu</description>
    </item>
    
    <item>
      <title>Moment.js 2.6中文文档</title>
      <link>/frontend/js/js-moment.js-2.6-doc/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/js-moment.js-2.6-doc/</guid>
      <description>文档地址：http://momentjs.com/docs/ 1. 在哪使用 浏览器或者Node.JS ###Node.js npm install moment var moment = require(&#39;moment&#39;); moment().format(); ###浏览器 &amp;lt;script src=&amp;quot;moment.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; moment().format(); &amp;lt;/script&amp;gt; ###Bower bower install</description>
    </item>
    
    <item>
      <title>javascript better practice</title>
      <link>/language/javascript-better-practice/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/javascript-better-practice/</guid>
      <description>null 把 null 理解为对象的占位符。 可以使用 null 的场景： 用来初始化变量，该变量可能赋值为一个对象 用来和一个已经初始化的变量比较，这个变量可以是也可以不是</description>
    </item>
    
    <item>
      <title>javascript 数组循环</title>
      <link>/frontend/js/javascript-array-loop/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/frontend/js/javascript-array-loop/</guid>
      <description>原文地址：http://stackoverflow.com/questions/9329446/for-each-over-an-array</description>
    </item>
    
    <item>
      <title>javascript 标准参考</title>
      <link>/language/javascript/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/javascript/</guid>
      <description>JavaScript 标准参考教程-阮一峰 操作符 布尔操作符 逻辑非 逻辑非操作符用叹号表示 ！ 可以应用于任何数据类型，逻辑非操作符首先会把操作数转换为布尔值，然后再求</description>
    </item>
    
    <item>
      <title>理解 JavaScript 的函数调用和 this</title>
      <link>/post/reship/understanding-javascript-function-invocation-and-this/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/post/reship/understanding-javascript-function-invocation-and-this/</guid>
      <description>JavaScript 函数调用方式以及 this 的含义让很多人感到困惑。 在我看来，可以通过理解函数调用的核心原语（primitive），然后把其他调用方式看成核心原语之</description>
    </item>
    
  </channel>
</rss>