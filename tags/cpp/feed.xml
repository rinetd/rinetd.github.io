<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on 时光小栈</title>
    <link>/tags/cpp/</link>
    <description>Recent content in cpp on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 09 Nov 2019 13:52:50 +0800</lastBuildDate>
    
	<atom:link href="/tags/cpp/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cmake</title>
      <link>/language/cpp/cmake/</link>
      <pubDate>Sat, 09 Nov 2019 13:52:50 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/cpp/cmake/</guid>
      <description>&lt;p&gt;CMAKE_CURRENT_SOURCE_DIR&lt;br /&gt;
这是当前处理的CMakeLists.txt所在的目录&lt;/p&gt;

&lt;p&gt;CMAKE_CURRENT_LIST_DIR&lt;br /&gt;
(自2.8.3开始)这是当前正在处理的列表文件的目录&lt;/p&gt;

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;前面的文章介绍了一个最简单的CMake工程，这篇文章将介绍一个稍微复杂一些的CMake工程，结合这个工程总结一下在组织一个C/C++工程时最为常用的一些CMake命令和变量。对于涉及到的命令和变量，介绍的原则是点到即止，先仅需掌握基本用法即可，让工程跑起来。&lt;/p&gt;

&lt;p&gt;上一篇文章中那个最简单的CMake Hello World工程，在其CMake脚本文件CMakeLists.txt中，仅有一句话：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```c
add_executable(hello hello.cpp)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面的&lt;code&gt;add_executable&lt;/code&gt;就是一个CMake命令，它的作用是添加一个可执行文件构建目标。&lt;/p&gt;

&lt;p&gt;下面从一个C++应用程序的编译过程为脉络对涉及到的命令和变量进行说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boost</title>
      <link>/language/cpp/boost/</link>
      <pubDate>Wed, 06 Nov 2019 15:17:38 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/cpp/boost/</guid>
      <description>sudo apt-get install --no-install-recommends libboost-all-dev /usr/bin/ld: cannot find -lboost_python ln -s /usr/local/lib/libboost_python27.so /usr/local/lib/libboost_python.so 卸载源码编译的boost库，需要删除: 1.安装路径的boost； 2. /usr/local/include/路径下的b</description>
    </item>
    
  </channel>
</rss>