<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on 时光小栈</title>
    <link>/tags/shell/</link>
    <description>Recent content in shell on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 30 Mar 2019 10:12:13 +0800</lastBuildDate>
    
	<atom:link href="/tags/shell/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shell system exec fork</title>
      <link>/linux/shell/shell-system-exec-fork/</link>
      <pubDate>Sat, 30 Mar 2019 10:12:13 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-system-exec-fork/</guid>
      <description>原文地址 https://www.cnblogs.com/qingergege/p/6601807.html 启动新进程（system 函数） system() 函数可以启动一个新的进程。 int system (const char *string) 这个函数的效果就相当于执行 sh –c string。 一般来说，使用 system</description>
    </item>
    
    <item>
      <title>shell subprocess子进程</title>
      <link>/linux/shell/shell-subprocess%E5%AD%90%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 24 Jan 2019 10:33:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-subprocess%E5%AD%90%E8%BF%9B%E7%A8%8B/</guid>
      <description>子进程执行 通过 . 和 source 命令执行的脚本 会在当前的shell进程中执行,继承当前的环境变量 通过 sh 和 ./run.sh 执行的脚本 会新建shell进程,只有expor</description>
    </item>
    
    <item>
      <title>shell 编程小助手</title>
      <link>/linux/shell/shell-helper/</link>
      <pubDate>Sat, 05 May 2018 13:49:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-helper/</guid>
      <description>shell 编程小助手 在众多命令中,一个命令可以帮助你进行shell编程,这个命令就是--- help.参数很多,对新老手都有帮助. 直接在命令行输出he</description>
    </item>
    
    <item>
      <title>shell 获取参数</title>
      <link>/linux/shell/shell-getopts/</link>
      <pubDate>Sat, 05 May 2018 13:49:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-getopts/</guid>
      <description>#!/bin/sh host=&amp;quot;localhost&amp;quot; port=3306 # 1. 选项后面的冒号表示该选项需要参数 # 2. 获取参数使用 $OPTARG while getopts &#39;:hp&#39; args do case $args in h) host=$OPTARG ;; p) port=$OPTARG ;; ?) echo $args &#39;not matched&#39; exit 1 ;; :) echo &amp;quot;Option -$OPTARG requires an argument.&amp;quot; &amp;gt;&amp;amp;2 exit 1 ;; *) printf &amp;quot;Usage: %s\n&amp;quot; $0 exit ;;</description>
    </item>
    
    <item>
      <title>bash中文手册Handbook</title>
      <link>/linux/shell/handbook/</link>
      <pubDate>Thu, 19 Apr 2018 14:40:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/handbook/</guid>
      <description>前言 如果你是一个程序员，时间的价值想必心中有数。持续优化工作流是你最重要的工作之一。 在通往高效和高生产力的路上，我们经常不得不做一些重复的劳</description>
    </item>
    
    <item>
      <title>shell中冒号:的作用</title>
      <link>/linux/shell/shell-%E5%86%92%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 07 Nov 2017 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-%E5%86%92%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>I. 在shell 中冒号的作用 用作变量条件赋值 {str:=expr} 如果变量str不为空,${str:=expr}就等于str的值，若str为空，就把expr的值赋</description>
    </item>
    
    <item>
      <title>shell中方括号在比较中的使用规则</title>
      <link>/linux/shell/shell-%E6%8B%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 07 Nov 2017 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-%E6%8B%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>(括号)的作用 Shell中的括号有其特殊的用法, 现总结如下: 符号$后的括号 ${a} 变量a的值, 在不引起歧义的情况下可以省略大括号. $(cmd) 命令替换, 结果</description>
    </item>
    
    <item>
      <title>shell中的字符串截取</title>
      <link>/linux/shell/shell-substr%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</link>
      <pubDate>Tue, 07 Nov 2017 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-substr%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</guid>
      <description>1、第一种方法: # ${varible##*string} 从左-&amp;gt;右截取最后一个string后的字符串 # ${varible#*string}从左-&amp;gt;右截取第一个str</description>
    </item>
    
    <item>
      <title>shell基础</title>
      <link>/linux/shell/shell%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 07 Nov 2017 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell%E5%9F%BA%E7%A1%80/</guid>
      <description>sh &amp;quot;文件.sh&amp;quot; , 之后跟文件名,新开子进程执行 sh -c &amp;quot;命令&amp;quot; , 直接把要执行的命令传递给 sh -c &#39;let c=$PATH;echo &amp;quot;c=$c&amp;quot;&#39; &amp;qu</description>
    </item>
    
    <item>
      <title>shell条件判断</title>
      <link>/linux/shell/shell-compare%E6%AF%94%E8%BE%83/</link>
      <pubDate>Tue, 07 Nov 2017 14:55:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/shell/shell-compare%E6%AF%94%E8%BE%83/</guid>
      <description>value 数值比较 -eq 等于 if [ &amp;quot;$a&amp;quot; -eq &amp;quot;$b&amp;quot; ] -ne 不等于 if [ &amp;quot;$a&amp;quot; -ne &amp;quot;$b&amp;quot; ] -gt 大于 if [ &amp;quot;$a&amp;quot; -gt &amp;quot;$b&amp;quot; ] -ge 大于等于 if [ &amp;quot;$a&amp;quot; -ge &amp;quot;$b&amp;quot; ] -lt 小于 if [ &amp;quot;$a&amp;quot; -lt &amp;quot;$b&amp;quot; ] -le 小于等于 if [ &amp;quot;$a&amp;quot; -le &amp;quot;$b&amp;quot; ] &amp;lt; 小于（使用</description>
    </item>
    
  </channel>
</rss>