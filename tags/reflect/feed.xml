<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reflect on 时光小栈</title>
    <link>/tags/reflect/</link>
    <description>Recent content in Reflect on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 25 Jul 2018 15:29:34 +0800</lastBuildDate>
    
	<atom:link href="/tags/reflect/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang-基于reflect和tag自动填充struct数据</title>
      <link>/language/golang/go-interface-reflect-tag/</link>
      <pubDate>Wed, 25 Jul 2018 15:29:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect-tag/</guid>
      <description>用Go开发Server端提供一些JSON数据格式的API，会定义业务Model，同时标记其json名字。 type School struct { ID int json:&amp;quot;id&amp;quot; Name string json:&amp;quot;name&amp;quot; } 通常也会复用这</description>
    </item>
    
    <item>
      <title>Go 语言接口反射详解</title>
      <link>/language/golang/go-interface-reflect/</link>
      <pubDate>Wed, 11 Apr 2018 10:01:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect/</guid>
      <description>https://segmentfault.com/a/1190000006190038 Golang 反射使用总结 | Ehlxr&#39;s Blog Golang的反射reflect深入理解和示例 - 掘金 Golang接口(interface)三个特性(译文) - WingPig - 博客园</description>
    </item>
    
    <item>
      <title>golang中reflect使用</title>
      <link>/language/golang/go-interface-reflect-usage/</link>
      <pubDate>Wed, 11 Apr 2018 10:01:07 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-interface-reflect-usage/</guid>
      <description>获取ptr的大小,操作系统指针大小 const ptrSize = 4 &amp;lt;&amp;lt; (^uintptr(0) &amp;gt;&amp;gt; 63) // unsafe.Sizeof(uintptr(0)) but an ideal const uintptr(0) 将 0 转换为 uintptr 类型 ^uintptr(0) 对 0 进行取反 : 32为 0xFFFF FFFFF FFFF FFFF 64位为 0xFFFF FFFFF FFFF FFFF FFFF FFFFF FFFF FFFF (^uintptr(0) &amp;gt;&amp;gt; 63)</description>
    </item>
    
  </channel>
</rss>