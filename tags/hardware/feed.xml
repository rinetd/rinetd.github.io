<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hardware on 时光小栈</title>
    <link>/tags/hardware/</link>
    <description>Recent content in hardware on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 11 Oct 2019 15:04:01 +0800</lastBuildDate>
    
	<atom:link href="/tags/hardware/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hi3516</title>
      <link>/hardware/hi3516/</link>
      <pubDate>Fri, 11 Oct 2019 15:04:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/hi3516/</guid>
      <description>海思论坛 - Powered by Discuz! Hi3516A开发--烧写/启动模式 - 不积跬步，无以至千里 - CSDN博客 Hi3516A开发--烧写/启动模式 一、启动模式 Hi3516A 支</description>
    </item>
    
    <item>
      <title>linux 内核中的pwm</title>
      <link>/hardware/linux-pwm/</link>
      <pubDate>Fri, 11 Oct 2019 10:02:45 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/linux-pwm/</guid>
      <description>PWM常用来做电机控制、LED背光亮度调节、开关电源等。 Linux pwm driver with sysfs TI linux pwm user guide: http://processors.wiki.ti.com/index.php/Linux_Core_PWM_User%27s_Guide#eHRPWM Freescale: https://support.bluetechnix.at/wiki/Linux_Software_User_Manual_(i.MX6)#PWM Gateworks: http://trac.gateworks.com/wiki/linux/pwm 对于TI的pwm来说 首先配置内核支持pwm模块，其中e</description>
    </item>
    
    <item>
      <title>gcc linaro aarch64 linux gnu</title>
      <link>/hardware/gcc-linaro-aarch64-linux-gnu/</link>
      <pubDate>Fri, 02 Aug 2019 14:13:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/gcc-linaro-aarch64-linux-gnu/</guid>
      <description>macos 安装 ARM 交叉编译环境 gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu sudo tar xJf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz -C /usr/local/ export PATH=/usr/local/gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu/bin:$PATH aarch64-linux-gnu-g++ -v GCC 5 和 GCC7 多版本共存 ls /usr/bin/gcc* sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 50 ——————————</description>
    </item>
    
    <item>
      <title>linux pinctrl</title>
      <link>/hardware/linux-pinctrl/</link>
      <pubDate>Thu, 23 May 2019 10:35:37 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/linux-pinctrl/</guid>
      <description>原文地址 https://blog.csdn.net/u012830148/article/details/80609337 https://blog.csdn.net/qq_21353001/article/details/88751773 linux内核使用pinctrl子系统实现操作gpio输出高低电平的实现 https://blog.csdn.net/u010299133/article/details/88646412s Pinctrl子系统之一了解基础概念: 1.Linux Pinctrl 子系统简介 在</description>
    </item>
    
    <item>
      <title>go hardware</title>
      <link>/hardware/go-hardware/</link>
      <pubDate>Wed, 22 May 2019 10:53:46 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/go-hardware/</guid>
      <description>rakyll/go-hardware: A directory of hardware related libs, tools, and tutorials for Go</description>
    </item>
    
    <item>
      <title>dts platform probe</title>
      <link>/hardware/dts-probe/</link>
      <pubDate>Sun, 28 Apr 2019 15:31:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/dts-probe/</guid>
      <description>driver使用dts的前提是driver已经是支持platform框架的driver，这样dts才可以发挥作用，因为dts和platfor</description>
    </item>
    
    <item>
      <title>dts status</title>
      <link>/hardware/dts-status/</link>
      <pubDate>Sun, 28 Apr 2019 09:25:03 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/dts-status/</guid>
      <description>在devicetree节点中通过加status来方便的使能或者disable driver - jason的笔记 - CSDN博客 结论: 默认情况下不设置stat</description>
    </item>
    
    <item>
      <title>go gpio</title>
      <link>/hardware/go-gpio/</link>
      <pubDate>Fri, 26 Apr 2019 09:03:35 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/go-gpio/</guid>
      <description>Linux下用文件IO的方式操作GPIO（/sys/class/gpio） - 卢小喵的学习笔记 - CSDN博客 Golang笔记–04–GPIO与</description>
    </item>
    
    <item>
      <title>go usart</title>
      <link>/hardware/go-usart/</link>
      <pubDate>Fri, 26 Apr 2019 08:59:54 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/go-usart/</guid>
      <description>https://github.com/andrewloable/treadmill-streetview/
func ReadSerial(s *serial.Port) { buf := make([]byte, 128) n, err := s.Read(buf) if err != nil { fmt.Printf(&amp;quot;read err %s&amp;quot;, err) } fmt.Printf(&amp;quot;Read: %x \n&amp;quot;, buf[:n]) } func WriteSerial(s *serial.Port, b []byte) { _, err := s.Write(b) if err != nil { fmt.Printf(&amp;quot;%s&amp;quot;, err) } fmt.Printf(&amp;quot;Wrote: %x\n&amp;quot;, b) }  package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;runtime&amp;quot; &amp;quot;time&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; cors &amp;quot;github.com/itsjamie/gin-cors&amp;quot; &amp;quot;github.com/tarm/serial&amp;quot; ) // SerialConfig ... type SerialConfig struct { Name string Baud int } var config SerialConfig var loops int64 // {&amp;quot;Name&amp;quot;:&amp;quot;COM4&amp;quot;,&amp;quot;Baud&amp;quot;:9600} func readConfigFromFile(ps *SerialConfig) { file, err := ioutil.</description>
    </item>
    
    <item>
      <title>go i2c</title>
      <link>/hardware/go-i2c/</link>
      <pubDate>Fri, 26 Apr 2019 08:59:40 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/hardware/go-i2c/</guid>
      <description>https://github.com/d2r2/go-i2c 对10位地址操作 https://github.com/golang/exp/blob/master/io/i2c/i2c.go / resolveAddr returns whether the addr is 10-bit masked or not. // It also returns the unmasked address. func resolveAddr(addr int) (unmasked int, tenbit bool) { return addr &amp;amp; (tenbitMask - 1), addr&amp;amp;tenbitMask == tenbitMask } go: AM2320传感器：CRC不匹配，来自传感器的</description>
    </item>
    
  </channel>
</rss>