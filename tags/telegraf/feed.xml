<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>telegraf on 时光小栈</title>
    <link>/tags/telegraf/</link>
    <description>Recent content in telegraf on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 03 Jan 2018 17:15:26 +0800</lastBuildDate>
    
	<atom:link href="/tags/telegraf/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang并发控制WaitGroup</title>
      <link>/language/golang/go-sync-waitgroup/</link>
      <pubDate>Wed, 03 Jan 2018 17:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-sync-waitgroup/</guid>
      <description>封装 waitgroup func (c *Crawler) Stop() { // 1. 匿名函数封装 wg 函数 asyncWaitStop := func(stop func()) { c.wg.Add(1) go func() { stop() c.wg.Done() }() } // 2. 多次执行 函数调用 asyncWaitStop(c.prospectorsReloader.Stop) // Stop prospectors in parallel asyncWaitStop(p.Stop) // 3. 等待执行结束 c.WaitForCompletion() } func (c *Crawler) WaitForCompletion() { c.wg.Wait() } https://github.com/golang/sync/blob/master/errgroup/errgroup.go var g errgroup.Group</description>
    </item>
    
  </channel>
</rss>