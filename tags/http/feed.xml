<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on 时光小栈</title>
    <link>/tags/http/</link>
    <description>Recent content in http on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 05 Jun 2018 17:12:17 +0800</lastBuildDate>
    
	<atom:link href="/tags/http/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Http开发</title>
      <link>/language/golang/go-http-method/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-method/</guid>
      <description>&lt;p&gt;Go 是一门新语言。很多人都是用 Go 来开发 Web 服务。Web 开发很多同学急于求成，直接使用 &lt;a href=&#34;https://github.com/astaxie/beego&#34; target=&#34;_blank&#34;&gt;beego&lt;/a&gt;, &lt;a href=&#34;https://github.com/labstack/echo&#34; target=&#34;_blank&#34;&gt;echo&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/kataras/iris&#34; target=&#34;_blank&#34;&gt;iris&lt;/a&gt; 等知名框架。对标准库 &lt;code&gt;net/http&lt;/code&gt; 的了解甚少。这里我就主要聊一下标准库 &lt;code&gt;net/http&lt;/code&gt; 开发 Web 服务时的使用细节。&lt;/p&gt;

&lt;h3 id=&#34;创建-http-服务&#34;&gt;创建 HTTP 服务&lt;/h3&gt;

&lt;p&gt;在 Go 中，创建 HTTP 服务很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

// in main.go

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main(){
    if err := http.ListenAndServe(&amp;quot;:12345&amp;quot;,nil); err != nil{
        fmt.Println(&amp;quot;start http server fail:&amp;quot;,err)
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就会启动一个 HTTP 服务在端口 &lt;strong&gt;12345&lt;/strong&gt;。浏览器输入 &lt;code&gt;http://localhost:12345/&lt;/code&gt; 就可以访问。当然从代码看出，没有给这个 HTTP 服务添加实际的处理逻辑，所有的访问都是默认的 &lt;code&gt;404 Not Found&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Http开发Form表单处理</title>
      <link>/language/golang/go-http-form/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-form/</guid>
      <description>提问? 对于一个form表单中有多个文件类型上传的在golang中如何处理? multipart: NextPart: http: invalid Read on closed Body 解决方案 : 修改Header的大小 s := &amp;amp;http.Server{ Addr: &amp;quot;:12345&amp;quot;, ReadTimeout: 10 * time.Second,</description>
    </item>
    
    <item>
      <title>Golang发送post表单请求</title>
      <link>/language/golang/go-http-post/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-post/</guid>
      <description>golang这边将map结构序列化通常采用json.Marshal和json.Unmarshal来做，但是在php server端还需要做js</description>
    </item>
    
    <item>
      <title>golang multipart上传文件到远端（如上传微信临时素材）</title>
      <link>/language/golang/go-http-form-multipart/</link>
      <pubDate>Tue, 05 Jun 2018 17:12:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/go-http-form-multipart/</guid>
      <description>golang multipart上传文件到远端（如上传微信临时素材） 最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，</description>
    </item>
    
    <item>
      <title>五大开源 Web 代理服务器横评：Squid、Privoxy、Varnish、Polipo、Tinyproxy</title>
      <link>/linux/http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>五大开源 Web 代理服务器横评：Squid、Privoxy、Varnish、Polipo、Tinyproxy apt install tinyproxy vi /etc/tinyproxy.conf</description>
    </item>
    
    <item>
      <title>跟着 Github 学习 Restful HTTP API 设计</title>
      <link>/devops/oauth2/restful-api-design-guide/</link>
      <pubDate>Sat, 05 Mar 2016 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/oauth2/restful-api-design-guide/</guid>
      <description>近几年提供 HTTP API 服务的公司越来越多，许多公司都把 API 作为产品重要的一部分，作为服务提供出去。而微服务的兴起，也让企业内部开始重视和频繁使用 HTTP API 。</description>
    </item>
    
  </channel>
</rss>