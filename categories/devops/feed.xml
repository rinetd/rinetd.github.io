<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on 时光小栈</title>
    <link>/categories/devops/</link>
    <description>Recent content in devops on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 12 Feb 2019 09:43:15 +0800</lastBuildDate>
    
	<atom:link href="/categories/devops/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s Cilium eBPF</title>
      <link>/devops/k8s-cilium-ebpf/</link>
      <pubDate>Tue, 12 Feb 2019 09:43:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/k8s-cilium-ebpf/</guid>
      <description>使用XDP(eXpress Data Path)防御DDoS攻击 - Netfilter,iptables/OpenVPN/TCP guard:-( - CSDN博客 K8S 网络插件（CNI）超过 10Gbit/s 的基准测试结果 - 知乎 浅谈Service M</description>
    </item>
    
    <item>
      <title>travis</title>
      <link>/devops/travis/</link>
      <pubDate>Sat, 08 Dec 2018 16:42:35 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/travis/</guid>
      <description>开启travis CI https://travis-ci.org/pytool/docker-elasticsearch-ik/settings 配置 Environment Variables DOCKER_USERNAME pytool language: bash sudo: required services: docker # branches: # only: # - master before_script: - docker login -u=&amp;quot;$DOCKER_USERNAME&amp;quot; -p=&amp;quot;$DOCKER_PASSWORD&amp;quot; - sudo sysctl -w vm.max_map_count=262144 script: # - docker build -t $DOCKER_USERNAME/burpsuite . # - docker build -t $TRAVIS_REPO_SLUG . # - docker push ${TRAVIS_REPO_SLUG} - if [ &amp;quot;$TRAVIS_BRANCH&amp;quot; == &amp;quot;master&amp;quot; ]; then docker build</description>
    </item>
    
    <item>
      <title>使用ansible安装Nomad使用教程</title>
      <link>/devops/nomad/nomad-ansible/</link>
      <pubDate>Wed, 05 Sep 2018 10:22:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/nomad/nomad-ansible/</guid>
      <description>Nomad 简介 Nomad是一个管理物理机器集群,并在集群上运行应用程序的工具。 Nomad的特点： 支持docker,Nomad的job可以使用dock</description>
    </item>
    
    <item>
      <title>Docker Swarm 集群管理工具 swirl</title>
      <link>/devops/docker/docker-swarm-swirl/</link>
      <pubDate>Thu, 15 Mar 2018 11:26:10 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/docker/docker-swarm-swirl/</guid>
      <description>SWIRL Swirl 是一个 Docker 管理工具，专注于 Swarm 集群。 Features Swarm 各组件管理，包括服务、网络、任务等 镜像与容器管理 Compose 管理与部署 服务状态监控（基于 Prometheus）</description>
    </item>
    
    <item>
      <title>JWT 参考文档</title>
      <link>/devops/oauth2/jwt-awesome/</link>
      <pubDate>Wed, 14 Mar 2018 14:14:00 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/oauth2/jwt-awesome/</guid>
      <description>JWT(Json Web Token) 登入換取 Access Token 請求 Header 夾帶 Authorization: JWT jwt 可以解決跨伺服器認證問題？每台伺服器只要用同樣的密鑰就可以校驗令牌，不需要從已創建的會話資料中認證你的登陸</description>
    </item>
    
    <item>
      <title>对比常用的认证机制Basic OAuth JWT</title>
      <link>/devops/oauth2/jwt/</link>
      <pubDate>Wed, 14 Mar 2018 14:14:00 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/oauth2/jwt/</guid>
      <description>理解jwt 几种常用的认证机制 HUGOMORE42 HTTP Basic Auth HTTP Basic Auth 在HTTP中，基本认证是一种用来允许Web浏览器或其他客户端程序在请求时提供用户名和口令形式的身份</description>
    </item>
    
    <item>
      <title>通过Golang深入理解JWT[JSON Web Token]</title>
      <link>/devops/oauth2/jwt-golang/</link>
      <pubDate>Wed, 14 Mar 2018 14:14:00 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/oauth2/jwt-golang/</guid>
      <description>JWT是什么？ JWT是JSON Web Token的缩写，即JSON Web令牌。 JWT规范中对其所作的描述是： JSON Web令牌（JWT）是一种紧凑的、U</description>
    </item>
    
    <item>
      <title>Etcdctl 命令行</title>
      <link>/devops/etcd/etcdctl/</link>
      <pubDate>Wed, 14 Mar 2018 10:35:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/etcd/etcdctl/</guid>
      <description>etcd中文文档 etcd官方文档 用户通常通过设置或者获取键的值来和 etcd 交互。这一节描述如何使用 etcdctl 来操作， etcdctl 是一个和 etcd 服务器交互的命令行工具。这</description>
    </item>
    
    <item>
      <title>Etcdctl 使用命令行标记和环境变量</title>
      <link>/devops/etcd/etcdctl-env/</link>
      <pubDate>Wed, 14 Mar 2018 10:30:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/etcd/etcdctl-env/</guid>
      <description>configuration 配置标记 etcd 可以通过命令行标记和环境变量来配置。命令行上设置的选项优先于环境变量。 对于标记 --my-flag 环境变量的格式是 ETCD_MY_FLAG。 适用于</description>
    </item>
    
    <item>
      <title>Ansible 优化</title>
      <link>/devops/ansible/ansible-profile/</link>
      <pubDate>Mon, 12 Mar 2018 17:38:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-profile/</guid>
      <description>Ansible 优化 Ansible 优化 开启 SSH 长连接 开启 Pipelining 开启 Accekerate 模式 设置 Facts 缓存 开启 SSH 长连接 Ansible 是使用 SSH 和远端主机进行通信，Ansible 对 SSH 的依赖性非常强，SSH 5.6+ 版本可</description>
    </item>
    
    <item>
      <title>Ansible-gather_facts-配置</title>
      <link>/devops/ansible/ansible-facts/</link>
      <pubDate>Mon, 12 Mar 2018 17:19:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-facts/</guid>
      <description>过滤指定的fact ansible localhost -m setup -a &#39;filter=ansible_eth*’ 自定义fact 对 facts 设置优化 ansible playbook 默认第一个 task 是 Gathering Facts 收集各主机的 facts 信息，以</description>
    </item>
    
    <item>
      <title>Ansible Register</title>
      <link>/devops/ansible/ansible-module-register/</link>
      <pubDate>Mon, 12 Mar 2018 17:09:02 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-module-register/</guid>
      <description>ansible register 基础使用讲解 Register doc # 注册变量 result，根据 result 结果判断是否已经生成过 etcd 证书 # result|failed 说明没有生成过证书，下一步生成证书 # result|succeeded 说明已经有 etcd 证书，使</description>
    </item>
    
    <item>
      <title>Ansible Register</title>
      <link>/devops/ansible/ansible-vars-register/</link>
      <pubDate>Mon, 12 Mar 2018 17:09:02 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-vars-register/</guid>
      <description>ansible register 基础使用讲解 Register doc # 注册变量 result，根据 result 结果判断是否已经生成过 etcd 证书 # result|failed 说明没有生成过证书，下一步生成证书 # result|succeeded 说明已经有 etcd 证书，使</description>
    </item>
    
    <item>
      <title>Ansible Module Wait_for</title>
      <link>/devops/ansible/ansible-module-debug/</link>
      <pubDate>Mon, 12 Mar 2018 17:00:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-module-debug/</guid>
      <description>wait_for 用于等待指定的时间（默认是 300 秒）。在不指定任何选项的时候，这个模块什么都不做。 该模块可以用于等待端口可用。比如，调用 java 应用服务器的启动脚本</description>
    </item>
    
    <item>
      <title>Ansible Module Wait_for</title>
      <link>/devops/ansible/ansible-module-wait_for/</link>
      <pubDate>Mon, 12 Mar 2018 17:00:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-module-wait_for/</guid>
      <description>- name: Check if systemd exists stat: path=/etc/systemd/system register: systemd_check - name: Install nsqlookupd systemd service template: src: nsqlookupd.service.j2 dest: /etc/systemd/system/nsqlookupd.service when: systemd_check.stat.exists == true notify: - reload daemon - restart nsqlookupd wait_for 用于等待指定的时间（默认是 300 秒）。在不指定任何选项的时候，这个模块什么都不</description>
    </item>
    
    <item>
      <title>Haproxy Keyword</title>
      <link>/linux/haproxy/haproxy-keyword/</link>
      <pubDate>Mon, 12 Mar 2018 16:48:02 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/haproxy/haproxy-keyword/</guid>
      <description>1、关键词 balance balance 用于定义负载均衡的算法，可用于 defaults、listen 和 backend 中。 balance 使用方法如下： balance [ ] balance url_param [check_post []] 用于在负载均衡场景中挑选一个</description>
    </item>
    
    <item>
      <title>Haproxy Syslog</title>
      <link>/linux/haproxy/haproxy-syslog/</link>
      <pubDate>Mon, 12 Mar 2018 16:45:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/haproxy/haproxy-syslog/</guid>
      <description>1.haproxy 安装 使用 yum install haproxy 进行一步安装, 很简单 配置说明 ######################################################################### # HAProxy 配置文件 ######################################################################### global # 使用系统的 syslog 记录日志（通过 udp，默认端口号为 514） log 127.0.0.1 local0 # info [err warning info debug] chroot /home/user/haproxy</description>
    </item>
    
    <item>
      <title>Haproxy Start</title>
      <link>/linux/haproxy/haproxy-start/</link>
      <pubDate>Mon, 12 Mar 2018 16:40:44 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/haproxy/haproxy-start/</guid>
      <description>目录： HAProxy 是什么 HAProxy 的核心能力和关键特性 HAProxy 的安装和运行 使用 HAProxy 搭建 L7 负载均衡器 使用 HAProxy 搭建 L4 负载均衡器 HAProxy 关键配置详解 使用 Keepalived 实现 HAProxy 高可用 HAProxy 是什么 HAProxy 是一</description>
    </item>
    
    <item>
      <title>HAproxy指南之haproxy配置详解</title>
      <link>/linux/haproxy/haproxy-config/</link>
      <pubDate>Mon, 12 Mar 2018 16:35:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/haproxy/haproxy-config/</guid>
      <description>HAProxy主要提供两个功能：http协议反向代理(不提供缓存功能)、基于tcp层的负载均衡(如https、mysql协议)。适用于需要会</description>
    </item>
    
    <item>
      <title>Haproxy 基础</title>
      <link>/linux/haproxy/haproxy/</link>
      <pubDate>Mon, 12 Mar 2018 16:35:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/haproxy/haproxy/</guid>
      <description>HAProxy 是什么 HAProxy(High Available Proxy) 是基于四层和七层的高可用负载均衡代理服务器，配置简单、支持多达上万条并发请求。HAProxy 的运行模型使得它集成到现在的架构上</description>
    </item>
    
    <item>
      <title>kubernetes 调度之 Taints 和 Tolerations</title>
      <link>/devops/kubernetes/kube-scheduler-taints/</link>
      <pubDate>Mon, 12 Mar 2018 15:55:43 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-scheduler-taints/</guid>
      <description>[](https://github.com/jolestar/kubernetes-complete-course/blob/master/chapter-5-kubernetes-pod-allocation-and-application-example.md) 为什么要有 Taints 和 Tolerations Taints 隔离 Node 上线新 Node 验证 下线 Node 维护 专用 Node Tolerations Pod 对 Taints Node 的容忍 验证 Taints Node 是否工作正常 表明 Pod 有资格使用专用 Node 每个节点必须运行的基础 Pod Kubernetes 中</description>
    </item>
    
    <item>
      <title>Ansible Include</title>
      <link>/devops/ansible/ansible-include/</link>
      <pubDate>Mon, 12 Mar 2018 13:59:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-include/</guid>
      <description>PlayBook: 执行： ansible-playbook playbook.yml -f 10 ansible-playbook playbook.yml --list-hosts Facts: ansible all -m setup Playbook vi playbook.yml - include: rabbitmq/playbook.yml - include: mysql/playbook.yml - include: keystone/playbook.yml - include: glance/playbook.yml - include: nova/playbook.yml - include: heat/playbook.yml Task Include: tasks: - include: task2.yml - include: wordpress.yml vars: wp_user: timmy ssh_keys: \- keys/one.txt \- keys/two.txt Handlers Include: handlers: \- include: handlers/handlers.yml Roles: webservers.yml fooservers.yml roles/ common/ files/ templates/ tasks/ handlers/ vars/</description>
    </item>
    
    <item>
      <title>Ansible 变量 Vars</title>
      <link>/devops/ansible/ansible-%E5%8F%98%E9%87%8F-vars/</link>
      <pubDate>Mon, 12 Mar 2018 11:07:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-%E5%8F%98%E9%87%8F-vars/</guid>
      <description>ansible 变量的引用 如何定义在 template 中引用的 items 变量 {% if nomad_options -%} options = { {% if nomad_raw_exec_enabled %} &amp;quot;driver.raw_exec.enable&amp;quot; = &amp;quot;1&amp;quot; {% endif %} {% for key, value in nomad_options.items() %} &amp;quot;{{ key }}&amp;quot; = &amp;quot;{{ value }}&amp;quot; {% endfor -%} } {% endif %} 方式1： 直接在 playbook 中定义变量</description>
    </item>
    
    <item>
      <title>Ansible 变量 Vars</title>
      <link>/devops/ansible/ansible-vars-define/</link>
      <pubDate>Mon, 12 Mar 2018 11:07:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-vars-define/</guid>
      <description>ansible 变量的引用 Ansible 变量 系统自动化让重复的工作变得更加容易，但是每个系统还是有一些细微的差别，变量就是如何处理系统之间的不同之处。这里将会列出变量</description>
    </item>
    
    <item>
      <title>Annotate</title>
      <link>/devops/kubernetes/kubectl/annotate/</link>
      <pubDate>Mon, 12 Mar 2018 09:09:11 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kubectl/annotate/</guid>
      <description>更新一个或者多个资源的 Annotate。 Annotate 是一个键值对，它可以包含比 label 更多的信息，并且可能是机读数据。 Annotate 用来存储那些辅助的，非区分性的信息，</description>
    </item>
    
    <item>
      <title>Etcd 基础详解</title>
      <link>/devops/etcd/etcd/</link>
      <pubDate>Fri, 09 Mar 2018 16:18:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/etcd/etcd/</guid>
      <description>Etcd官方文档中文版 参考资料 https://github.com/wudixiaowei/note/tree/master/etcd name: sync etcd.sh template: src=env/etcd.sh dest=/etc/profile.d/etcd.sh export ETCDCTL_API=3 export ETCD_ENDPOINTS=&amp;quot;https://127.0.0.1:2379&amp;quot; export ETCD_CA_CERT_FILE=&amp;quot;{{ ca_dir }}ca.pem&amp;quot; export ETCD_CERT_FILE=&amp;quot;{{ etcd_ca_dir }}etcd.pem&amp;quot; export ETCD_KEY_FILE=&amp;quot;{{ etcd_ca_dir }}etcd-key.pem&amp;quot; 一、 ETCD 常用命令 启动etcd etcd -name etcd_01 -data-dir /root/data/etcd/data 可选启动参数 --name 节点名称 --data-dir 指定</description>
    </item>
    
    <item>
      <title>Kube Network Flannel</title>
      <link>/devops/kubernetes/kube-network-flannel/</link>
      <pubDate>Fri, 09 Mar 2018 16:03:05 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-network-flannel/</guid>
      <description>Flannel介绍 Flannel是 CoreOS 团队针对 Kubernetes 设计的一个覆盖网络（Overlay Network）工具，其目的在于帮助每一个使用 Kuberentes 的 CoreOS 主机拥有</description>
    </item>
    
    <item>
      <title>Kube Kubectl</title>
      <link>/devops/kubernetes/kubectl/</link>
      <pubDate>Fri, 09 Mar 2018 14:49:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kubectl/</guid>
      <description>全局配置 -o 获取详细信息 要以特定的格式向终端窗口输出详细信息，可以在 kubectl 命令中添加 -o 或者 -output 标志。 输出格式 描述 -o=json 输出 JSON 格式的 API 对象 -o=jsonpath=&amp;lt;template&amp;gt; 打印 jsonpath 表达式中</description>
    </item>
    
    <item>
      <title>Kube Install</title>
      <link>/devops/kubernetes/kube-install/</link>
      <pubDate>Fri, 09 Mar 2018 14:16:14 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-install/</guid>
      <description>仓库镜像。 阿里云上没有附Help说明连接，简单摸索了下，如下设置可用（centos）。注意不要开启check。 cat &amp;lt;/etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 不过阿里</description>
    </item>
    
    <item>
      <title>Kubernetes 软件仓库 Helm</title>
      <link>/devops/kubernetes/kube-plugin-helm/</link>
      <pubDate>Fri, 09 Mar 2018 14:02:57 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-plugin-helm/</guid>
      <description>helm 仓库 Helm 基本概念 Helm 可以理解为 Kubernetes 的包管理工具，可以方便地发现、共享和使用为 Kubernetes 构建的应用，它包含几个基本概念 Chart：一个 Helm 包，其中包含了运行</description>
    </item>
    
    <item>
      <title>Kubernetes软件仓库Helm</title>
      <link>/devops/kubernetes/kube-plugin-kubeapps/</link>
      <pubDate>Fri, 09 Mar 2018 14:02:57 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-plugin-kubeapps/</guid>
      <description>安装kubeapps 执行以下命令安装 sudo curl -L https://github.com/kubeapps/installer/releases/download/v0.0.2/kubeapps-linux-amd64 -o /usr/local/bin/kubeapps &amp;amp;&amp;amp; sudo chmod +x /usr/local/bin/kubeapps 部署kubeapps 如果能够访问外部的网络，执行下面命令 kubeapps up 离线环境，首先下载所需</description>
    </item>
    
    <item>
      <title>Lvs 基础详解</title>
      <link>/linux/lvs/lvs-basic/</link>
      <pubDate>Thu, 08 Mar 2018 09:04:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-basic/</guid>
      <description>LB Cluster &amp;amp; LVS 硬件负载均衡设备； F5,BIG IP、 Citrix,Netscaler、 A10、 软件负载均衡设备： 四层 LVS (章文嵩) 只理解只解析四层协议，对应用层</description>
    </item>
    
    <item>
      <title>Lvs Scheduler</title>
      <link>/linux/lvs/lvs-scheduler/</link>
      <pubDate>Thu, 08 Mar 2018 08:39:32 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-scheduler/</guid>
      <description>三种IP负载均衡技术的优缺点比较: 杂项 VS/NAT VS/TUN VS/DR 服务器操作系统 任意 支持隧道 多数(支持Non-arp ) 服务器网络 私有网络 局域网/广域网 局域网 服务器</description>
    </item>
    
    <item>
      <title>ipvsadm 命令的使用</title>
      <link>/linux/lvs/ipvsadm/</link>
      <pubDate>Wed, 07 Mar 2018 18:23:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/ipvsadm/</guid>
      <description>ipvsadm 的使用 ansible lvs-dr -m yum -a &#39;name=keepalived,ipvsadm state=installed&#39; ipvsadm -Ln 查看当前虚拟服务器 ipvsadm -Lnc 查看当前所有连接 ipvsadm 查看ipvs版本号及hash表大小 cat /proc/net/ip_vs_conn 查看当前所有连接 ipvsadm -lcn / grep x.x.x.x 查看请求x</description>
    </item>
    
    <item>
      <title>Lvs Nat</title>
      <link>/linux/lvs/lvs-mode-nat/</link>
      <pubDate>Wed, 07 Mar 2018 18:19:59 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-mode-nat/</guid>
      <description>1、NAT模式-网络地址转换 Virtualserver via Network address translation(VS/NAT) 这个是通过网络地址转换的方法来实现调度的。首先调度器(LB)接收到客户的请求数据包时（请求的目的IP为</description>
    </item>
    
    <item>
      <title>Lvs TUN模式</title>
      <link>/linux/lvs/lvs-mode-tun/</link>
      <pubDate>Wed, 07 Mar 2018 18:18:46 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-mode-tun/</guid>
      <description>TUN模式 virtual server via ip tunneling模式:采用NAT模式时，由于请求和响应的报文必须通过调度器地址重写，当客户请求越来越多时，调度器处理能力</description>
    </item>
    
    <item>
      <title>Lvs Dr</title>
      <link>/linux/lvs/lvs-mode-dr/</link>
      <pubDate>Wed, 07 Mar 2018 10:48:17 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-mode-dr/</guid>
      <description>3、DR模式（直接路由模式） Virtual server via direct routing (vs/dr) DR模式是通过改写请求报文的目标MAC地址，将请求发给真实服务器的，而真实服务器响应后的处理结果直接</description>
    </item>
    
    <item>
      <title>Lvs详md</title>
      <link>/linux/lvs/lvs%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 07 Mar 2018 09:35:16 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs%E8%AF%A6%E8%A7%A3/</guid>
      <description>LVS 集群中的术语 LVS工作在网络的第四层，内核的tcp/ip栈上，这也决定了它在所有负载均衡软件中性能是最好的。 LVS主要由两部分组成，一个是</description>
    </item>
    
    <item>
      <title>Kube Proxy</title>
      <link>/devops/kubernetes/kube-proxy/</link>
      <pubDate>Mon, 05 Mar 2018 09:41:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-proxy/</guid>
      <description>kube-proxy监听API server中service和endpoint的变化情况，并通过userspace、iptables、ipvs</description>
    </item>
    
    <item>
      <title>LVS DR模式的一些问题</title>
      <link>/linux/lvs/lvs-question/</link>
      <pubDate>Mon, 05 Mar 2018 09:41:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/linux/lvs/lvs-question/</guid>
      <description>最近一年，接触了大名鼎鼎的LVS，碰到一些问题，记录一下。由于工作中只用到 DR 模式，所以只写 DR 模式的一些问题。 LVS 只是内核的一个模块，只负责怎么</description>
    </item>
    
    <item>
      <title>kubernetes service原理</title>
      <link>/devops/kubernetes/kube-service/</link>
      <pubDate>Mon, 05 Mar 2018 09:41:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kube-service/</guid>
      <description>kubernetes service 小黄人学 Kubernetes Service</description>
    </item>
    
    <item>
      <title>kubernetes 入门</title>
      <link>/devops/kubernetes/kubernetes-intro/</link>
      <pubDate>Mon, 05 Mar 2018 09:41:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kubernetes-intro/</guid>
      <description>第一章 kubernetes 入门 kubectl run nginx --image=nginx:alpine --replicas=2 --port=80 deployment &amp;quot;nginx&amp;quot; created To expose your service to the public internet, run: kubectl expose deployment nginx --target-port=80 --type=LoadBalancer service &amp;quot;nginx&amp;quot; exposed You can see that they are running by: kubectl get po NAME READY STATUS RESTARTS AGE nginx-3800858182-h9v8d 1/1 Running 0 1m nginx-3800858182-wqafx 1/1 Running 0 1m Kubernetes will ensure that your application keeps running, by automatically restarting</description>
    </item>
    
    <item>
      <title>kubernetes 基础</title>
      <link>/devops/kubernetes/kubernetes/</link>
      <pubDate>Mon, 05 Mar 2018 09:41:24 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/kubernetes/kubernetes/</guid>
      <description>[包管理工具 Helm]() 可理解为 Kubernetes 的 apt-get / yum helm 仓库 参考资料 https://github.com/wudixiaowei/note/tree/master/kuernates Books Kubernetes 完全教程 Kubernetes 入门指南 和我一步步部署 kubernetes 集群 Blogs 极术 http://www.lijiaocn.com http://cizixs.com</description>
    </item>
    
    <item>
      <title>使用 Ansible Playbook 管理 docker mysql</title>
      <link>/devops/ansible/ansible-module-docker-mysql/</link>
      <pubDate>Mon, 15 Jan 2018 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-module-docker-mysql/</guid>
      <description>- hosts: localhost tags: - mysql gather_facts: false tasks: # create a mysql container using the official mysql image - name: start database server docker: image: mysql name: mysql env: - MYSQL_ROOT_PASSWORD={{MYSQL_ROOT_PASSWORD}} # mysql takes a few seconds to start up. the next two tasks ask docker for # the ip address of the mysql container and then wait for the mysql port to # become available. - name: get</description>
    </item>
    
    <item>
      <title>使用 Ansible 管理 MySQL 复制</title>
      <link>/devops/ansible/ansible-module-mysql/</link>
      <pubDate>Mon, 15 Jan 2018 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-module-mysql/</guid>
      <description>Ansible 是一个配置管理和应用部署工具，功能类似于目前业界的配置管理工具 Chef,Puppet,Saltstack。Ansible 是通过 Python 语言开发。</description>
    </item>
    
    <item>
      <title>使用 Ansible 管理 MySQL 复制</title>
      <link>/devops/ansible/ansible-mysql/</link>
      <pubDate>Mon, 15 Jan 2018 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-mysql/</guid>
      <description>Ansible 是一个配置管理和应用部署工具，功能类似于目前业界的配置管理工具 Chef,Puppet,Saltstack。Ansible 是通过 Python 语言开发。</description>
    </item>
    
    <item>
      <title>通过systemd 管理 docker-etcd</title>
      <link>/devops/etcd/docker-etcd/</link>
      <pubDate>Wed, 03 Jan 2018 17:53:25 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/etcd/docker-etcd/</guid>
      <description>参考 ### # make sure etcd process has write access to this directory # remove this directory if the cluster is new; keep if restarting etcd # rm -rf /tmp/etcd/s1 # to write service file for etcd with Docker cat &amp;gt; /tmp/s1.service &amp;lt;&amp;lt;EOF [Unit] Description=etcd with Docker Documentation=https://github.com/coreos/etcd [Service] Restart=always RestartSec=5s TimeoutStartSec=0 LimitNOFILE=40000 ExecStart=/usr/bin/docker \ run \ --rm \ --net=host \ --name etcd-v3.3.0-rc.0 \ --volume=/docker/etcd/s1:/etcd-data \ gcr.io/etcd-development/etcd:v3.3.0-rc.0 \ /usr/local/bin/etcd</description>
    </item>
    
    <item>
      <title>flannel 源码分析</title>
      <link>/devops/docker/docker-flannel-source-insight/</link>
      <pubDate>Sun, 05 Mar 2017 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/docker/docker-flannel-source-insight/</guid>
      <description>简介 flannel 是为了解决容器的跨主机网络问题而出现的项目，可以提供多种类型的网络模型： 普通网络：udp、vxlan、hostgw 平台网络：gce、a</description>
    </item>
    
    <item>
      <title>drone</title>
      <link>/devops/drone/drone/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone/</guid>
      <description>Drone 安装 # docker run -d --restart=always --name=drone-server-8 -p 8080:8000 -p 9000:9000 -e DRONE_VOLUME=/data:/data -e DRONE_HOST=http://drone.hangruan.cn -e DRONE_SECRET=changemypass -e DRONE_OPEN=true -e DRONE_ADMIN=root,rinetd -e DRONE_GOGS=true -e DRONE_GOGS_URL=&amp;quot;http://git.hangruan.cn&amp;quot; -v /docker/drone:/var/lib/drone drone/drone:0.8.1 # docker run -d --restart=always --name=drone-agent-8 --link drone-server-8:drone-server -e DRONE_SERVER=drone-server:9000 -e DRONE_SECRET=changemypass -e DRONE_DEBUG=true -v /var/run/docker.sock:/var/run/docker.sock drone/agent:0.8.1 # docker run -d --restart=always --name=drone-agent-8 -e DRONE_SERVER=10.30.216.58:9000 -e DRONE_SECRET=changemypass -e DRONE_DEBUG=true -v /var/run/docker.sock:/var/run/docker.sock drone/agent 常见问题处理 一.</description>
    </item>
    
    <item>
      <title>drone</title>
      <link>/devops/drone/drone%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%8F%92%E4%BB%B6/</guid>
      <description>go get github.com/UKHomeOffice/drone-trigger
drone repo ls
drone-trigger -r bianban/lybb</description>
    </item>
    
    <item>
      <title>drone</title>
      <link>/devops/drone/drone-variables/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone-variables/</guid>
      <description>DRONE 变量在 github.com/cncd/pipeline/pipeline/frontend/metadata.go 中定义 params := map[string]string{ &amp;quot;CI&amp;quot;: &amp;quot;drone&amp;quot;, &amp;quot;DRONE&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;DRONE_ARCH&amp;quot;: &amp;quot;linux/amd64&amp;quot;, &amp;quot;DRONE_REPO&amp;quot;: m.Repo.Name, &amp;quot;DRONE_REPO_SCM&amp;quot;: &amp;quot;git&amp;quot;, &amp;quot;DRONE_REPO_OWNER&amp;quot;: owner, &amp;quot;DRONE_REPO_NAME&amp;quot;: name, &amp;quot;DRONE_REPO_LINK&amp;quot;: m.Repo.Link, &amp;quot;DRONE_REPO_BRANCH&amp;quot;: m.Curr.Commit.Branch, &amp;quot;DRONE_REPO_PRIVATE&amp;quot;: fmt.Sprintf(&amp;quot;%v&amp;quot;, m.Repo.Private), &amp;quot;DRONE_REPO_TRUSTED&amp;quot;: &amp;quot;false&amp;quot;, // TODO should this be added? &amp;quot;DRONE_REMOTE_URL&amp;quot;: m.Repo.Remote, &amp;quot;DRONE_COMMIT_SHA&amp;quot;: m.Curr.Commit.Sha, &amp;quot;DRONE_COMMIT_REF&amp;quot;: m.Curr.Commit.Ref, &amp;quot;DRONE_COMMIT_REFSPEC&amp;quot;: m.Curr.Commit.Refspec, &amp;quot;DRONE_COMMIT_BRANCH&amp;quot;: m.Curr.Commit.Branch, &amp;quot;DRONE_COMMIT_LINK&amp;quot;: m.Curr.Link, &amp;quot;DRONE_COMMIT_MESSAGE&amp;quot;: m.Curr.Commit.Message, &amp;quot;DRONE_COMMIT_AUTHOR&amp;quot;: m.Curr.Commit.Author.Name, &amp;quot;DRONE_COMMIT_AUTHOR_EMAIL&amp;quot;: m.Curr.Commit.Author.Email, &amp;quot;DRONE_COMMIT_AUTHOR_AVATAR&amp;quot;: m.Curr.Commit.Author.Avatar, &amp;quot;DRONE_BUILD_NUMBER&amp;quot;: fmt.Sprintf(&amp;quot;%d&amp;quot;, m.Curr.Number), &amp;quot;DRONE_PARENT_BUILD_NUMBER&amp;quot;: fmt.Sprintf(&amp;quot;%d&amp;quot;, m.Curr.Parent), &amp;quot;DRONE_BUILD_EVENT&amp;quot;: m.Curr.Event, &amp;quot;DRONE_BUILD_LINK&amp;quot;: fmt.Sprintf(&amp;quot;%s/%s/%d&amp;quot;,</description>
    </item>
    
    <item>
      <title>drone-android</title>
      <link>/devops/drone/drone-plugin-android%E6%94%AF%E6%8C%81/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone-plugin-android%E6%94%AF%E6%8C%81/</guid>
      <description>william0wang/drone-android</description>
    </item>
    
    <item>
      <title>drone_java</title>
      <link>/devops/drone/drone-plugin-maven/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone-plugin-maven/</guid>
      <description>matrix: include: - WORK_DIR: work SSH_HOST: b1.linyicn.com SSH_PORT: 22 DB_HOST: 123.56.199.52 DB_PORT: 3306 DB_DATABASE: notes DB_USER: notes DB_PASSWORD: yourpassword HTTP_PORT: 10000 TARGET_DIR: /docker/tomcat/webapps/ workspace: base: /go path: src/${DRONE_REPO_LINK:6} clone: git: image: plugins/git volumes: - /docker/src:/go/src pipeline: maven: image: maven group: ${DRONE_BRANCH} volumes: - /root/.m2:/root/.m2 - /docker/src:/go/src commands: - mvn clean package -P${DRONE_BRANCH} rsync: image: drillster/drone-rsync volumes: - /docker/src:/go/src hosts: ${SSH_HOST} port: ${SSH_PORT} user: root # key: ${PLUGIN_KEY} source: target/${DRONE_REPO_NAME}/ #</description>
    </item>
    
    <item>
      <title>drone在serices中访问文件</title>
      <link>/devops/drone/drone-pipeline-files/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone-pipeline-files/</guid>
      <description>How to access files from services 在drone 执行构建的时候 会创建Service containers. 有时候我们需要这些services容器 可以访问我们源文件repository 中的</description>
    </item>
    
    <item>
      <title>drone支持PHP</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81php/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81php/</guid>
      <description>ETNA Alternance</description>
    </item>
    
    <item>
      <title>drone支持PHP</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81ssh/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81ssh/</guid>
      <description>加密变量设置3种方式 PASSWORD 123456 # 变量设置 SSH_KEY ${cat /path/to/.ssh/id_rsa} # 命令返回值 SSH_KEY @/path/to/.ssh/id_rsa # 文件内容 原理： 将script中的每个语句通过 &amp;amp;&amp;amp; 拼接为一条语句 多个子项之间用 &amp;amp;&amp;amp; 连接 每</description>
    </item>
    
    <item>
      <title>drone支持Rsync</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81rsync/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81rsync/</guid>
      <description>Drone plugin for deploying code using rsync Use the Rsync plugin to synchronize files to remote hosts, and execute arbitrary commands on those hosts. Config The following parameters are used to configure the plugin: user - user to log in as on the remote machines, defaults to root PLUGIN_USER RSYNC_USER key - private SSH key for the remote machines hosts - hostnames or ip-addresses of the remote machines port -</description>
    </item>
    
    <item>
      <title>drone支持ansible</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81ansible/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81ansible/</guid>
      <description>https://github.com/William-Yeh/docker-ansible.git rics3n/drone-ansible: Drone plugin for deploying with ansible rics3n/drone-ansible</description>
    </item>
    
    <item>
      <title>drone支持ansible</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81email/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81email/</guid>
      <description>https://github.com/Drillster/drone-email</description>
    </item>
    
    <item>
      <title>drone支持docker</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81docker/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81docker/</guid>
      <description>Docker | Plugins | Drone drone-plugins/drone-docker: Drone plugin for publishing Docker images</description>
    </item>
    
    <item>
      <title>drone支持gitter</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81gitter/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81gitter/</guid>
      <description>https://webhooks.gitter.im/e/f8c369697302929c7807 pipeline: gitter: image: plugins/gitter webhook: https://webhooks.gitter.im/e/f8c369697302929c7807 GITTER_WEBHOOK</description>
    </item>
    
    <item>
      <title>drone支持webhook</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81webhook/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81webhook/</guid>
      <description>https://github.com/drone-plugins/drone-webhook notify: webhook: debug: true method: POST auth: username: $$TOWER_USER password: $$TOWER_PASS urls: - http://tower.example.com/api/v1/job_templates/44/launch/ - http://tower.example.com/api/v1/job_templates/45/launch/ content_type: application/json template: &#39;{&amp;quot;name&amp;quot;: &amp;quot;project.deploy&amp;quot;,&amp;quot;extra_vars&amp;quot;: &amp;quot;{\&amp;quot;env\&amp;quot;: \&amp;quot;dev\&amp;quot;,\&amp;quot;git_branch\&amp;quot;: \&amp;quot;{{ build.branch }}\&amp;quot;,\&amp;quot;hipchat_token\&amp;quot;: \&amp;quot;$$HIPCHAT_TOKEN\&amp;quot;}&amp;quot;}&#39; https://github.com/zyclonite/drone-webhook pipeline: notify: image: zyclonite/drone-webhook webhook: https://your.domain.com/drone/hook token: bearer token for authentication skip_verify: false|true when: status: [ success, failure ]</description>
    </item>
    
    <item>
      <title>drone支持缓存</title>
      <link>/devops/drone/drone%E6%94%AF%E6%8C%81%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E6%94%AF%E6%8C%81%E7%BC%93%E5%AD%98/</guid>
      <description>Volume Cache | Plugins | Drone https://stackoverflow.com/questions/41412481/whether-drone-io-support-reusing-docker-container-for-build matrix: include: - REPO_URL: &amp;quot;git.yimengapp.com&amp;quot; LOCAL_VOLUME: &amp;quot;/var/www/yimeng&amp;quot; # pipeline: clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/master:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: master clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/release:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: release clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/develop:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: [ dev, develop ] busybox: image: busybox volumes: - ${LOCAL_VOLUME}/:${LOCAL_VOLUME} commands: - if [ ${DRONE_BRANCH} == master ]; then chown -R 33:33 ${LOCAL_VOLUME}/master ; fi - if [</description>
    </item>
    
    <item>
      <title>drone自定义clone</title>
      <link>/devops/drone/drone%E8%87%AA%E5%AE%9A%E4%B9%89clone/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone%E8%87%AA%E5%AE%9A%E4%B9%89clone/</guid>
      <description>http://readme.drone.io/questions/how-to-customize-the-clone-stage/ http://readme.drone.io/0.5/usage/customize-clone/ https://github.com/drone-plugins/drone-git/blob/master/DOCS.md matrix: include: - REPO_URL: &amp;quot;git.yimengapp.com&amp;quot; LOCAL_VOLUME: &amp;quot;/var/www/yimeng&amp;quot; pipeline: clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/master:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: master clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/release:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: release clone: image: plugins/git volumes: - ${LOCAL_VOLUME}/develop:/drone/src/${REPO_URL}/${DRONE_REPO} when: branch: [ dev, develop ] busybox: image: busybox volumes: - ${LOCAL_VOLUME}/:${LOCAL_VOLUME} commands: - if [ ${DRONE_BRANCH} == master ]; then chown -R 33:33 ${LOCAL_VOLUME}/master ; fi - if [ ${DRONE_BRANCH} == release ]; then</description>
    </item>
    
    <item>
      <title>jenkins</title>
      <link>/devops/drone/jenkins/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/jenkins/</guid>
      <description>docker + jenkins + git + maven自动化构建与部署 持续集成Jenkins API常见用法 最佳实战Docker持续集成图文详解 从零开始搭建 Jenkins+Docker 自动化集成环境 创</description>
    </item>
    
    <item>
      <title>构建在Docker之上的开源持续集成平台(CI)：Drone</title>
      <link>/devops/drone/webfront/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/webfront/</guid>
      <description>https://github.com/nieweidong/fetool Drone 是一个构建在Docker之上的开源持续集成平台(CI)。Drone 提供了一组预建的Docker映像，支持12+种语言和几乎所有主要的数据</description>
    </item>
    
    <item>
      <title>深入理解dronefile</title>
      <link>/devops/drone/drone-dronefile/</link>
      <pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/drone/drone-dronefile/</guid>
      <description>深入理解dronefile 对于每个.drone.yml来说，pipeline的每个步骤经过drone解析后就对应一个dockerfile文件</description>
    </item>
    
    <item>
      <title>Linux 命令 Ansible</title>
      <link>/devops/ansible/ansible/</link>
      <pubDate>Sat, 05 Mar 2016 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible/</guid>
      <description>资料 Ansible快速入门:技术原理与实战 Ansible 中文权威指南 Ansible 简书专题文章 Ansible 入门 ** ansible 模块 ** Install sudo pip install ansible Centos sudo yum install ansible Ubuntu $ sudo apt-get install software-properties-common $ sudo apt-add-repository ppa:ansible/ansible $ sudo apt-get update $ sudo apt-get</description>
    </item>
    
    <item>
      <title>Linux 命令 Ansible-playbook</title>
      <link>/devops/ansible/ansible-playbook/</link>
      <pubDate>Sat, 05 Mar 2016 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-playbook/</guid>
      <description>使用 ansible-playbook -i inventory.ini xxx.yml -k -K -i 指定主机 -e 设置运行变量 -k 执行之后需要输入 ssh 连接用户的密码，如果做了中控机到所有节点的互信，则不需要此参数 -K 执行之后需要输入</description>
    </item>
    
    <item>
      <title>Linux命令 Ansible组件</title>
      <link>/devops/ansible/ansible-plugins/</link>
      <pubDate>Sat, 05 Mar 2016 15:30:01 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/ansible/ansible-plugins/</guid>
      <description>Tower替代软件 docker run -d --name=semaphore -p 80:3000 -v /docker/ansible/semaphore:/data playniuniu/ansible-semaphore #!/bin/sh SEMAPHORE_DB_HOST=&amp;quot;127.0.0.1&amp;quot; SEMAPHORE_DB_PORT=&amp;quot;3306&amp;quot; SEMAPHORE_DB_USER=&amp;quot;root&amp;quot; SEMAPHORE_DB_PASS=&amp;quot;root&amp;quot; SEMAPHORE_DB=&amp;quot;semaphore&amp;quot; SEMAPHORE_PLAYBOOK_PATH=&amp;quot;/data/&amp;quot; SEMAPHORE_ADMIN=&amp;quot;root&amp;quot; SEMAPHORE_ADMIN_EMAIL=&amp;quot;root@example.com&amp;quot; SEMAPHORE_ADMIN_NAME=&amp;quot;root&amp;quot; SEMAPHORE_ADMIN_PASSWORD=&amp;quot;root&amp;quot; some_host ansible_ssh_port=2222 ansible_ssh_user=manager pam_limits ansible all -m shell -a &amp;quot;ulimit -HSn 65535&amp;quot; ansible all -m pam_limits -a &amp;quot;domain=* limit_type=- limit_item=nofile value=65536&amp;quot; ansible all -m pam_limits -a &amp;quot;domain=* limit_type=hard limit_item=nofile value=65536&amp;quot; 时间同步chrony ansible-galaxy</description>
    </item>
    
  </channel>
</rss>