<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cgo on 时光小栈</title>
    <link>/categories/cgo/</link>
    <description>Recent content in cgo on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 23 May 2019 18:34:11 +0800</lastBuildDate>
    
	<atom:link href="/categories/cgo/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go cgo intro</title>
      <link>/language/golang/cgo/go-cgo-intro/</link>
      <pubDate>Thu, 23 May 2019 18:34:11 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-intro/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://studygolang.com/articles/2629 前提条件： 了解 Go 语言和 C 语言的基本知识和基本用法。 一、什么是 cgo 简单地说，cgo 是在 Go 语言中使用 C 语言代码的一种方</description>
    </item>
    
    <item>
      <title>go cgo string</title>
      <link>/language/golang/cgo/go-cgo-string/</link>
      <pubDate>Thu, 23 May 2019 16:26:31 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-string/</guid>
      <description>package cgoutil /* #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; static char** make_str_array(int size) { return calloc(sizeof(char*), size); } static int len_str_array(char **arr) { int i = 0; while (arr[i] != NULL) i++; return i+1; // NULL does count } static void set_str_array(char **arr, int idx, char *s) { arr[idx] = s; } static void free_str_array(char **arr, int size) { int i; for (i = 0; i &amp;lt; size; i++) { free(arr[i]); } free(arr); } */ import &amp;quot;C&amp;quot; import ( &amp;quot;unsafe&amp;quot; ) // CStringArray represents an array of pointers to NULL terminated C strings, // the array itself is terminated with a NULL type CStringArray struct { Pointer unsafe.</description>
    </item>
    
    <item>
      <title>go cgo qsort</title>
      <link>/language/golang/cgo/go-cgo-qsort/</link>
      <pubDate>Wed, 22 May 2019 18:17:05 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-qsort/</guid>
      <description>2.6 实战: 封装qsort qsort快速排序函数是C语言的高阶函数，支持用于自定义排序比较函数，可以对任意类型的数组进行排序。本节我们尝试基于C</description>
    </item>
    
    <item>
      <title>golang中cgo中文说明</title>
      <link>/language/golang/cgo/golang-cgo/</link>
      <pubDate>Wed, 22 May 2019 14:14:56 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/golang-cgo/</guid>
      <description>cgo 使用带有go命令的cgo Go调用C的函数 C引用Go的函数 指针传递的实现 特别案例 直接使用cgo Cgo支持创建调用C代码的Go包。 1. 使用带有g</description>
    </item>
    
    <item>
      <title>go cgo acc</title>
      <link>/language/golang/cgo/go-cgo-acc/</link>
      <pubDate>Wed, 22 May 2019 13:57:52 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-acc/</guid>
      <description>CGO可以让golang和c互相调用，譬如x264或者aac编解码，用go再实现一遍比较麻烦，直接调用c的函数会更合适。 CGO可以直接用C的</description>
    </item>
    
    <item>
      <title>go cgo struct</title>
      <link>/language/golang/cgo/go-cgo-struct/</link>
      <pubDate>Wed, 22 May 2019 11:52:54 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-struct/</guid>
      <description>对于CGO来说，方式 typedef struct libfacedetection_capi_face_t libfacedetection_capi_face_t; typedef struct libfacedetection_capi_result_t libfacedetection_capi_result_t; struct libfacedetection_capi_face_t { int x; int y; int w; int h; int neighbors; int angle; }; 现代所有主流操作系统几乎都是用 C 语音实现的，几乎所有高级语言都能调用 C 语</description>
    </item>
    
    <item>
      <title>go cgo gc</title>
      <link>/language/golang/cgo/go-cgo-gc/</link>
      <pubDate>Wed, 22 May 2019 11:48:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-gc/</guid>
      <description>cgo调用内存泄露：C.GostringN()生成的string不会被GC? package main /* #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;malloc.h&amp;gt; void mal(char **p) { int l = 1000000; *p= (char *)malloc(l); *(*p+l-2) = &#39;a&#39;; *(*p+l-1) = &#39;b&#39;; } */ import &amp;quot;C&amp;quot; import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot;</description>
    </item>
    
    <item>
      <title>Golang 中通过 cgo 调用  C&#43;&#43; 的动态库的功能封装</title>
      <link>/language/golang/cgo/go-cgo-extend/</link>
      <pubDate>Wed, 22 May 2019 11:46:43 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-extend/</guid>
      <description>将C++warpper 文件写在go中 https://github.com/winlinvip/go-fdkaac/blob/master/fdkaac/dec.go https://github.com/giorgisio/goav/blob/master/avfilter/avfilter.go 原文地址 http://yangxikun.com/golang/2018/03/09/golang-cgo.html Examples of calls between Go and C/C++ Golang 中通过 cgo 调用 C++ 的动态库的功能封装 下面将通过一个示例程序，演示如何在 Golang 中通过</description>
    </item>
    
    <item>
      <title>go cgo skill</title>
      <link>/language/golang/cgo/go-cgo-skill/</link>
      <pubDate>Wed, 22 May 2019 11:37:36 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/cgo/go-cgo-skill/</guid>
      <description>// int EC60789803D1(const char *CompanyTag, char *dataIn, int inlen, unsigned char *dataout, int outlen); // Encrypt { var byteOutBuffer []byte byteOutBuffer = make( []byte, 2048 ) var outlen int = 2048 var strKey string strKey = &amp;quot;test&amp;quot; var inString string inString = &amp;quot;fdsafdsafdsa&amp;quot; fmt.Println( &amp;quot;inlen=&amp;quot;, len(inString) ) InKey := C.CString( strKey ) InData := C.CString( inString ) InInLen := C.int( len(inString) ) InOut := (*C.uchar)( &amp;amp;byteOutBuffer[0] ) InOutLen := C.int(</description>
    </item>
    
  </channel>
</rss>