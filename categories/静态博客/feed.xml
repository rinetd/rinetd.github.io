<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>静态博客 on 时光小栈</title>
    <link>/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
    <description>Recent content in 静态博客 on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 05 Oct 2017 10:58:08 -0400</lastBuildDate>
    
	<atom:link href="/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Shortcode</title>
      <link>/language/golang/hugo/hugo_shortcode/</link>
      <pubDate>Thu, 05 Oct 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo_shortcode/</guid>
      <description>简介 Markdown 语法十分简洁，如果想要插入更加复杂的内容就需要直接使用 HTML 代码，比如通过 &amp;lt;img&amp;gt; 来自定义图片尺寸，通过 &amp;lt;iframes&amp;gt; 来插入视频。显然这样做，虽然扩展了 Markdown 文</description>
    </item>
    
    <item>
      <title>Hugo 模板template</title>
      <link>/language/golang/hugo/hugo-template/</link>
      <pubDate>Thu, 05 Oct 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-template/</guid>
      <description>Hugo分类模板 | Hugo 27 一.模板变量 如果说模板是待填充的网页，则模板变量是用来填充模板的内容。Hugo 内置了许多可以在模板中访问的变量，这些变</description>
    </item>
    
    <item>
      <title>Hugo 模板template Lookup order</title>
      <link>/language/golang/hugo/hugo-template-lookup/</link>
      <pubDate>Thu, 05 Oct 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-template-lookup/</guid>
      <description>Hugo分类模板 | Hugo 27 HUGO主题结构 - yea978.github.io 首页模板: Home Page 按照以下顺序，首先检查源目录，再检查主题目录，获取模板生成页面： layouts/demotype/index.html layouts/demotype/home.html layouts/demotype/list.html layouts/demolayout.html layouts/index.html layouts/home.html layouts/list.html layouts/_default/demolayout.html layouts/_default/index.html layouts/_default/home.html</description>
    </item>
    
    <item>
      <title>Hugo 中的 Markdown 语法</title>
      <link>/language/golang/hugo/hugo_markdown/</link>
      <pubDate>Wed, 06 Sep 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo_markdown/</guid>
      <description>简介 Hugo 中用于书写的标记语言主要是 Markdown。Markdown 作为一门标记语言，其核心语法十分精炼易用，有许多优秀的 Markdown 解释器可以将 Markdown 文档</description>
    </item>
    
    <item>
      <title>Hugo 源码修改BlackFriday配置</title>
      <link>/language/golang/hugo/hugo-blackfriday-nofollow/</link>
      <pubDate>Wed, 06 Sep 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-blackfriday-nofollow/</guid>
      <description>2 modified: helpers/content.go 4 @ content.go:115 @ type BlackFriday struct { 5 LatexDashes bool 6 TaskLists bool 7 PlainIDAnchors bool 8 Nofollow bool 9 Noreferrer bool 10 Extensions []string 11 ExtensionsMask []string 12 } 13 @ content.go:133 @ func newBlackfriday(config map[string]interface{}) *BlackFriday { 14 &amp;quot;latexDashes&amp;quot;: true, 15 &amp;quot;plainIDAnchors&amp;quot;: true, 16 &amp;quot;taskLists&amp;quot;: true, 17 &amp;quot;nofollow&amp;quot;: true, 18 &amp;quot;noreferrer&amp;quot;: true, 19 } 20 21 ToLowerMap(defaultParam) 22 @ content.go:267 @ func (c *ContentSpec)</description>
    </item>
    
    <item>
      <title>Hugo 文档处理</title>
      <link>/language/golang/hugo/hugo-template-function-sort/</link>
      <pubDate>Tue, 15 Aug 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-template-function-sort/</guid>
      <description>&lt;h3 id=&#34;where-条件筛选&#34;&gt;where：条件筛选&lt;/h3&gt;

&lt;p&gt;用途：筛选某个字段包含某个值的对象。通常与range配合，符合条件运行迭代，否则进入下一次的迭代。&lt;/p&gt;

&lt;p&gt;参数：where 筛选对象 字段（键) 值&lt;/p&gt;

&lt;p&gt;作用域：列表页、分类术语页、分组页&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;p&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;hugo&amp;quot; }}&lt;br /&gt;
   {{ .Content }}&lt;br /&gt;
{{ end }}&lt;/p&gt;

&lt;p&gt;//文件头属性&lt;br /&gt;
+++&lt;br /&gt;
series: golang&lt;br /&gt;
+++&lt;br /&gt;
//筛选字段（键）可以用“.”来访问上下文&lt;br /&gt;
{{ range where .Site.Pages &amp;quot;Params.series&amp;quot; &amp;quot;golang&amp;quot; }}&lt;br /&gt;
   {{ .Content }}&lt;br /&gt;
{{ end }}&lt;/p&gt;

&lt;p&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;!=&amp;quot; &amp;quot;post&amp;quot; }}&lt;br /&gt;
   {{ .Content }}&lt;br /&gt;
{{ end }}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;筛选默认的是等于，也可以利用下面的符号判断

    =, ==, eq :判断等于、恒等于
    !=, &amp;lt;&amp;gt;, ne : 判断不等于
    &amp;gt;=, ge : 大于等于
    &amp;gt;, gt : 大于
    &amp;lt;=, le : 小于等于
    &amp;lt;, lt : 大于
    in: 是否包含
    not in : 是否不包含

筛选与节选可以共同使用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;hugo&amp;quot;) }}&lt;br /&gt;
   {{ .Content }}&lt;br /&gt;
{{ end }}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上面的语句筛选包含hugo章节的前五条记录。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unset field:排除空字段&lt;/p&gt;

&lt;p&gt;{{ range where .Data.Pages &amp;quot;.Params.specialpost&amp;quot; &amp;quot;!=&amp;quot; nil }}&lt;br /&gt;
   {{ .Content }}&lt;br /&gt;
{{ end }}&lt;/p&gt;

&lt;h3 id=&#34;文档排序&#34;&gt;文档排序&lt;/h3&gt;

&lt;p&gt;当在列表页面展示多篇文档时，就涉及到文档先后顺序的问题了。Hugo 中文档默认是以元信息 &lt;code&gt;weight&lt;/code&gt; 来排序，当文档未指定 &lt;code&gt;weight&lt;/code&gt; 时，就以元信息 &lt;code&gt;date&lt;/code&gt; 来排序，如果这两项都没有指定的话，列表页面看到的文档就是无序的。&lt;/p&gt;

&lt;p&gt;不过除了上面 &lt;code&gt;weight&lt;/code&gt; 和 &lt;code&gt;date&lt;/code&gt; 外，Hugo 还支持我们以更多方式来排序列表页面，我们需要在列表模板文件中使用以下一些模板变量来控制文档的排序&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按照元信息权重和日期排序（默认排序方式）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
&amp;lt;li&amp;gt;
  &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
  &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照元信息日期排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByDate }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照发布日期排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByPublishDate }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照失效日期排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByExpiryDate }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照修改日期排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByLastmod }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照文档内容长度排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByLength }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照文档标题排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByTitle }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照链接标题排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByLinkTitle }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照其它元信息排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range (.Date.Pages.ByParam &amp;quot;author.last_name&amp;quot;) }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;反转排序（以上所有排序都可反转）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByTitle.Reverse }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，文档还可以按照分类进行排序，而分类标签本身可以按照标签字母序来排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ $data := .Data }}
{{ range $key, $value := .Data.Taxonomy.Alphabetical }}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.LanguagePrefix }}/{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者按照关联到该分类标签的文档数量排序（即按照分类的热门程度排序）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ $data := .Data }}
{{ range $key, $value := .Data.Taxonomy.ByCount }}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.LanguagePrefix }}/{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;属于某个分类的文档默认按照 &lt;code&gt;weight&lt;/code&gt; 和 &lt;code&gt;date&lt;/code&gt; 来排序，并且支持为文档指定分类排序时的权重，这样可以调整文档在分类中的顺序，这个功能通过文档中指定元数据 &lt;code&gt;taxonomyname_weight&lt;/code&gt; 来实现，其中 &lt;code&gt;taxonomyname&lt;/code&gt; 代表分类名。&lt;/p&gt;

&lt;h3 id=&#34;文档分组&#34;&gt;文档分组&lt;/h3&gt;

&lt;p&gt;当在列表页面展示多篇文档时，Hugo 支持我们根据文档类型、日期或者 Section 来分组显示文档。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按照 Section 分组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupBy &amp;quot;Section&amp;quot; }}
&amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
  {{ range .Pages }}
  &amp;lt;li&amp;gt;
  &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
  &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  {{ end }}
&amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照日期分组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照发布日期分组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByPublishDate &amp;quot;2006-01&amp;quot; }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按照其它元信息分组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByParam &amp;quot;param_key&amp;quot; }}
&amp;lt;!-- ... --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;反转分组排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range (.Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot;).Reverse }}
&amp;lt;!-- 利用模板函数Reverse来反转 --&amp;gt;
{{ end }}

{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;desc&amp;quot; }}
&amp;lt;!-- 或者直接指定排序方向 --&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;组内文档排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;asc&amp;quot; }}
&amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
  {{ range .Pages.ByTitle }}
  &amp;lt;!-- 可以按照之前介绍排序文档的各种方法来排序组内文档 --&amp;gt;
  {{ end }}
&amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;文档过滤&#34;&gt;文档过滤&lt;/h3&gt;

&lt;p&gt;有时候也许想要排除某些文档在列表页面显示，Hugo 支持我们在列表页面限制文档显示数量以及限制显示的文档种类。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;限制文档显示数量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages }}
  &amp;lt;!-- 利用模板函数first，只显示排在前面的10篇文档 --&amp;gt;
  {{ .Render &amp;quot;summary&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据条件过滤某些文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }}
 &amp;lt;!-- 利用模板函数where，只筛选显示Section为post的文档 --&amp;gt;
 {{ .Content }}
{{ end }}

{{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}
 &amp;lt;!-- 同时使用where和first --&amp;gt;
 {{ .Content }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;文档摘要&#34;&gt;文档摘要&lt;/h3&gt;

&lt;p&gt;Hugo 默认会截取文档前70个词作为文档摘要，并将摘要内容存放在模板页面变量 &lt;code&gt;.Summary&lt;/code&gt; ，同时提供模板变量 &lt;code&gt;.Truncated&lt;/code&gt; 来记录截取的摘要是否包含了文档的全部内容。同时 Hugo 还支持我们在内容文档中明确指定将哪些内容作为该文档的摘要，具体来说需要在文档中插入一行 `&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 模板中的函数</title>
      <link>/language/golang/hugo/hugo-template-function/</link>
      <pubDate>Tue, 15 Aug 2017 10:58:08 -0400</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-template-function/</guid>
      <description>模板函数 模板函数是比较枯燥的，大概的了解下hugo可以干什么就可以了，看多了眼花。需要时，可以搜索本页的相关函数。因个人运用和理解有限，一些</description>
    </item>
    
    <item>
      <title>hugo 模板变量</title>
      <link>/language/golang/hugo/hugo-template-variable/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-template-variable/</guid>
      <description>Data 变量 注：数据以键值对形式保存在模板变量中，键由数据文件所在目录名、文件名以及变量名来决定，比如定义在数据文件 data/author/en/fiction.toml 中的变量 names ，最终在模板中通过</description>
    </item>
    
    <item>
      <title>typora</title>
      <link>/language/golang/hugo/typora/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/typora/</guid>
      <description>sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end</description>
    </item>
    
    <item>
      <title>个人博客hugo</title>
      <link>/language/golang/hugo/hugo/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo/</guid>
      <description>Hugo 中文 中文帮助 主题 hueman https://demo-hueman.presscustomizr.com/demo/layouts/boxed/# 如果需要更新所有Hugo的依赖库，增加 -u 参数： $ go get -u -v github.com/spf13/hugo hugo new site path/sitename 新建一个站点 hugo new post/good-to-great.md 添加到content/post 目录</description>
    </item>
    
    <item>
      <title>个人博客hugo Taxonomy</title>
      <link>/language/golang/hugo/hugo-taxonomy/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-taxonomy/</guid>
      <description>Taxonomy，即分类，是Hugo中一个很有用的页面管理功能。 本文基于Hyde这个Theme，介绍如何在Hugo中定制、使用Taxonom</description>
    </item>
    
    <item>
      <title>个人博客hugo Taxonomy tags</title>
      <link>/language/golang/hugo/hugo-taxonomy-tags/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-taxonomy-tags/</guid>
      <description>生成当前文档的标签列表 {{ if isset .Params &amp;quot;tags&amp;quot; }} {{ if gt (len .Params.tags ) 0 }} &amp;lt;div class=&amp;quot;tags&amp;quot;&amp;gt; &amp;lt;i class=&amp;quot;fa fa-tags&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; {{ range .Params.tags }} &amp;lt;a href=&amp;quot;/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;!-- &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ &amp;quot;/tags/&amp;quot; | relLangURL }}{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; --&amp;gt; {{ end }} &amp;lt;/div&amp;gt; {{ end }} {{ end }} 根据标</description>
    </item>
    
    <item>
      <title>静态搜索javascript lunr.js</title>
      <link>/language/golang/hugo/hugo-search-lunr/</link>
      <pubDate>Sat, 01 Apr 2017 04:15:26 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo-search-lunr/</guid>
      <description>A static website with a dynamic search function? Yes. As alternatives to embeddable scripts from Google or other search engines, you can provide your visitors a custom search by indexing your content files directly. GitHub Gist for Hugo Workflow. This gist contains a simple workflow to create a search index for your static website. It uses a simple Grunt script to index all your content files and lunr.js to serve</description>
    </item>
    
    <item>
      <title>Hugo 集成 MathJax</title>
      <link>/language/golang/hugo/hugo_mathjax/</link>
      <pubDate>Thu, 16 Mar 2017 09:46:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hugo_mathjax/</guid>
      <description>简介 MathJax 是一款用于显示 LaTex 等风格数学公式的利器，只需要将其简单几步就可以将其集成到 Hugo 中。 引用 MathJax 为了展示文章中编写的 LaTeX 数学公式，需要集成 MathJ</description>
    </item>
    
    <item>
      <title>Hexo使用文档</title>
      <link>/language/golang/hugo/hexo/</link>
      <pubDate>Tue, 02 Feb 2016 15:03:34 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/golang/hugo/hexo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://leanote.com/blog/view/52db8463e01c530ef8000001&#34; target=&#34;_blank&#34;&gt;leanote博客评论设置之Disqus&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://wiki.jikexueyuan.com/project/hexo-document/&#34; target=&#34;_blank&#34;&gt;Hexo document&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://wizardforcel.gitbooks.io/hexo-doc/content/index.html&#34; target=&#34;_blank&#34;&gt;Hexo 中文文档&lt;/a&gt;&lt;br /&gt;
说明:hexo 还是很不错的&lt;/p&gt;

&lt;h2 id=&#34;hexo-按更新时间排序-vi-config-yml&#34;&gt;hexo 按更新时间排序 &lt;code&gt;vi _config.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;index_generator:&lt;br /&gt;
  order_by: -update # order_by: Posts order. (Order by date descending by default)&lt;br /&gt;
##&lt;br /&gt;
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;0x01-安装node-js&#34;&gt;0x01 安装node.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;node.js稳定版&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;ln -s /home/kun/mysofltware/node-v0.10.28-linux-x64/bin/node /usr/local/bin/node&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ln -s /home/kun/mysofltware/node-v0.10.28-linux-x64/bin/npm /usr/local/bin/npm&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;0x02-配置node-js&#34;&gt;0x02 配置node.js&lt;/h3&gt;

&lt;p&gt;通过npm config set   生成 .npmrc&lt;br /&gt;
prefix=D:\Users\nodejs\npm&lt;br /&gt;
cache=D:\Users\nodejs\npm-cache&lt;/p&gt;

&lt;h3 id=&#34;0x03-安装-hexo&#34;&gt;0x03 安装 hexo&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;npm install -g hexo&lt;/code&gt;&lt;br /&gt;
查看安装结果&lt;br /&gt;
&lt;code&gt;npm list -g **hexo**&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;

&lt;p&gt;sudo apt-get install nodejs&lt;br /&gt;
sudo ln -s /usr/bin/nodejs /usr/bin/node&lt;br /&gt;
npm install -g cnpm --registry=&lt;a href=&#34;https://registry.npm.taobao.org&#34; target=&#34;_blank&#34;&gt;https://registry.npm.taobao.org&lt;/a&gt;&lt;br /&gt;
sudo npm install cnpm -g&lt;br /&gt;
sudo cnpm install hexo -g&lt;br /&gt;
sudo cnpm install&lt;/p&gt;

&lt;p&gt;&amp;quot;hexo&amp;quot;: &amp;quot;^3.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-toc&amp;quot;: &amp;quot;^0.0.6&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-server&amp;quot;: &amp;quot;^0.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-github&amp;quot;: &amp;quot;^1.0.1&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-deployer-git&amp;quot;: &amp;quot;^0.1.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-archive&amp;quot;: &amp;quot;^0.1.4&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-category&amp;quot;: &amp;quot;^0.1.3&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-feed&amp;quot;: &amp;quot;^1.1.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-index&amp;quot;: &amp;quot;^0.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-sitemap&amp;quot;: &amp;quot;^1.1.2&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-generator-tag&amp;quot;: &amp;quot;^0.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-renderer-ejs&amp;quot;: &amp;quot;^0.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-renderer-sass&amp;quot;: &amp;quot;^0.2.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-renderer-jade&amp;quot;: &amp;quot;^0.3.0&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-renderer-marked&amp;quot;: &amp;quot;^0.2.10&amp;quot;,&lt;br /&gt;
   &amp;quot;hexo-renderer-stylus&amp;quot;: &amp;quot;^0.3.1&amp;quot;,&lt;/p&gt;

&lt;p&gt;hexo&lt;/p&gt;

&lt;p&gt;npm install hexo -g #安装&lt;br /&gt;
npm update hexo -g #升级&lt;br /&gt;
hexo init #初始化&lt;br /&gt;
简写&lt;/p&gt;

&lt;p&gt;hexo n &amp;quot;我的博客&amp;quot; == hexo new &amp;quot;我的博客&amp;quot; #新建文章&lt;br /&gt;
hexo p == hexo publish&lt;br /&gt;
hexo g == hexo generate#生成&lt;br /&gt;
hexo s == hexo server #启动服务预览&lt;br /&gt;
hexo d == hexo deploy#部署&lt;/p&gt;

&lt;p&gt;服务器&lt;/p&gt;

&lt;p&gt;hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。&lt;br /&gt;
hexo server -s #静态模式&lt;br /&gt;
hexo server -p 5000 #更改端口&lt;br /&gt;
hexo server -i 192.168.1.1 #自定义 IP&lt;/p&gt;

&lt;p&gt;hexo clean #清除缓存 网页正常情况下可以忽略此条命令&lt;br /&gt;
hexo g #生成静态网页&lt;br /&gt;
hexo d #开始部署&lt;br /&gt;
python -m SimpleHTTPServer&lt;br /&gt;
监视文件变动&lt;/p&gt;

&lt;p&gt;hexo generate #使用 Hexo 生成静态文件快速而且简单&lt;br /&gt;
hexo generate --watch #监视文件变动&lt;/p&gt;

&lt;p&gt;完成后部署&lt;/p&gt;

&lt;p&gt;两个命令的作用是相同的&lt;br /&gt;
hexo generate --deploy&lt;br /&gt;
hexo deploy --generate&lt;br /&gt;
hexo deploy -g&lt;br /&gt;
hexo server -g&lt;/p&gt;

&lt;p&gt;草稿&lt;/p&gt;

&lt;p&gt;hexo publish [layout] &lt;title&gt;&lt;/p&gt;

&lt;p&gt;模版&lt;/p&gt;

&lt;p&gt;hexo new &amp;quot;postName&amp;quot; #新建文章&lt;br /&gt;
hexo new page &amp;quot;pageName&amp;quot; #新建页面&lt;br /&gt;
hexo generate #生成静态页面至public目录&lt;br /&gt;
hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）&lt;br /&gt;
hexo deploy #将.deploy目录部署到GitHub&lt;/p&gt;

&lt;p&gt;hexo new [layout] &lt;title&gt;&lt;br /&gt;
hexo new photo &amp;quot;My Gallery&amp;quot;&lt;br /&gt;
hexo new &amp;quot;Hello World&amp;quot; --lang tw&lt;/p&gt;

&lt;p&gt;模版（Scaffold）&lt;/p&gt;

&lt;p&gt;hexo new photo &amp;quot;My Gallery&amp;quot;&lt;/p&gt;

&lt;p&gt;设置文章摘要&lt;/p&gt;

&lt;p&gt;以上是文章摘要&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>