<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elasticsearch on 时光小栈</title>
    <link>/categories/elasticsearch/</link>
    <description>Recent content in elasticsearch on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 10 Dec 2018 08:55:20 +0800</lastBuildDate>
    
	<atom:link href="/categories/elasticsearch/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>elasticsearch ik mapping</title>
      <link>/devops/elk/elasticsearch/elasticsearch-ik-mapping/</link>
      <pubDate>Mon, 10 Dec 2018 08:55:20 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elk/elasticsearch/elasticsearch-ik-mapping/</guid>
      <description>实现 ik_max_word 分词 #!/bin/sh registration_name=&amp;quot;192.168.29.158:5000/elasticsearch&amp;quot; container_id=0 while [ &amp;quot;$container_id&amp;quot; = &amp;quot;0&amp;quot; ] do container_id=$(docker ps|grep &amp;quot;$registration_name&amp;quot;|awk &#39;{print $1}&#39;) [ &amp;quot;$container_id&amp;quot; = &amp;quot;&amp;quot; ] &amp;amp;&amp;amp; container_id=0 sleep 1s done echo $container_id curl -XDELETE &#39;http://127.0.0.1:9201/user&#39; curl -XPUT &#39;http://127.0.0.1:9201/user&#39; curl -XPOST &#39;http://127.0.0.1:9201/user/default/_mapping&#39; -d&#39; { &amp;quot;default&amp;quot;: { &amp;quot;_all&amp;quot;: { &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;term_vector&amp;quot;: &amp;quot;no&amp;quot;, &amp;quot;store&amp;quot;: &amp;quot;false&amp;quot; }, &amp;quot;properties&amp;quot;: { &amp;quot;real_name&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot;, &amp;quot;search_analyzer&amp;quot;: &amp;quot;ik_max_word&amp;quot; }, &amp;quot;last_login_at&amp;quot;: { &amp;quot;type&amp;quot;:</description>
    </item>
    
    <item>
      <title>Elasticsearch Delete By Query Plugin</title>
      <link>/devops/elastic/elasticsearch-delete-by-query-plugin-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch-delete-by-query-plugin-/</guid>
      <description>前言 Elasticsearch 的使用过程中常常要删除具备一定特性的一批数据(documents) 传统方法：使用 _search API搜出来，然后通过脚本处理后使用 DELETE 方法一个个删除</description>
    </item>
    
    <item>
      <title>Elasticsearch 常用命令</title>
      <link>/devops/elastic/elasticsearch-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>前言 Elasticsearch 是一个使用得非常广泛的分布式全文检索数据库 主要有以下特性: Distributed, scalable, and highly available Real-time search and analytics capabilities Sophisticated RESTful API 更为详细的文档可以参考 Elasticsearch Reference 下面对它常用的一些命令进</description>
    </item>
    
    <item>
      <title>Elasticsearch 批量导入数据</title>
      <link>/devops/elastic/elasticsearch-%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch-%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>前言 Elasticsearch 是一款非常高效的全文检索引擎。 Elasticsearch 可以非常方便地进行数据的多维分析，所以大数据分析领域也经常会见到它的身影，生产环境中绝大部分新产生的数</description>
    </item>
    
    <item>
      <title>Elasticsearch 映射</title>
      <link>/devops/elastic/elasticsearch-%E6%98%A0%E5%B0%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch-%E6%98%A0%E5%B0%84/</guid>
      <description>前言 Elasticsearch 是一个 schemeless 的文档型数据库 ES 不像一般 RDBMS (mysql，postgresql) 一样，字段类型必须提前定义，但是不定义字段类型，并不代表没有字段</description>
    </item>
    
    <item>
      <title>Elasticsearch之Client</title>
      <link>/devops/elastic/elasticsearch%E4%B9%8Bclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch%E4%B9%8Bclient/</guid>
      <description>Elastic Search 是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。 设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 支</description>
    </item>
    
    <item>
      <title>Elasticsearch之建立索引</title>
      <link>/devops/elastic/elasticsearch%E4%B9%8B%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch%E4%B9%8B%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95/</guid>
      <description>Elastic Search 是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。 设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 支</description>
    </item>
    
    <item>
      <title>Elasticsearch之搜索</title>
      <link>/devops/elastic/elasticsearch%E4%B9%8B%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch%E4%B9%8B%E6%90%9C%E7%B4%A2/</guid>
      <description>Elastic Search 是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。 设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 支</description>
    </item>
    
    <item>
      <title>Elasticsearch简单入门</title>
      <link>/devops/elastic/elasticsearch%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/devops/elastic/elasticsearch%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</guid>
      <description>Elastic Search 是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。 设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 支</description>
    </item>
    
  </channel>
</rss>