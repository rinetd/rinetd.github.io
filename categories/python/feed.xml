<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 时光小栈</title>
    <link>/categories/python/</link>
    <description>Recent content in python on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 06 Nov 2019 11:05:22 +0800</lastBuildDate>
    
	<atom:link href="/categories/python/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python os split</title>
      <link>/language/python/python-os-split/</link>
      <pubDate>Wed, 06 Nov 2019 11:05:22 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-os-split/</guid>
      <description># -*- coding:utf-8 -*- &amp;quot;&amp;quot;&amp;quot; @author:lei &amp;quot;&amp;quot;&amp;quot; import os #os.path.join() 将分离的部分合成一个整体 filename=os.path.join(&#39;/home/ubuntu/python_coding&#39;,&#39;split_func&#39;) print filename #输出为：/home/ubuntu/python_coding/split_func #os</description>
    </item>
    
    <item>
      <title>python bytes string</title>
      <link>/language/python/python-bytes-string/</link>
      <pubDate>Fri, 01 Nov 2019 18:32:21 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-bytes-string/</guid>
      <description>1、bytes主要是给在计算机看的，string主要是给人看的 2、中间有个桥梁就是编码规则，现在大趋势是utf8 3、bytes对象是二进制，</description>
    </item>
    
    <item>
      <title>谈谈python2,3中的str、unicode</title>
      <link>/language/python/python-string/</link>
      <pubDate>Thu, 31 Oct 2019 21:02:12 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-string/</guid>
      <description>谈谈python2,3中的str、unicode - 简书 本文首先对Unicode与UTF-8的区别做一个解释，如果已了解，可跳过该部分。然后会</description>
    </item>
    
    <item>
      <title>python xml</title>
      <link>/language/python/python-xml/</link>
      <pubDate>Thu, 31 Oct 2019 20:34:39 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-xml/</guid>
      <description>ET读取xml try: import xml.etree.cElementTree as ET C实现速度快一点的xml.etree.cElementTree except ImportError: import xml.etree.ElementTree as ET import xml.etree.ElementTree as ET----------导入xml模</description>
    </item>
    
    <item>
      <title>python super</title>
      <link>/language/python/python-super/</link>
      <pubDate>Mon, 30 Sep 2019 17:25:18 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-super/</guid>
      <description>Python super 详解</description>
    </item>
    
    <item>
      <title>python defaultdict</title>
      <link>/language/python/python-defaultdict/</link>
      <pubDate>Mon, 30 Sep 2019 17:08:19 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-defaultdict/</guid>
      <description>理解 Python 语言中的 defaultdict - 团子的小窝</description>
    </item>
    
    <item>
      <title>python loadimage</title>
      <link>/language/python/python-loadimage/</link>
      <pubDate>Sat, 21 Sep 2019 15:22:49 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-loadimage/</guid>
      <description>#定义图片数据集加载函数load_image def load_image(data_dir): labels = [] images = [] for d in directories: label_dir = os.path.join(data_dir, d) file_names = [os.path.join(label_dir, f) for f in os.listdir(label_dir) if f.endswith(&#39;.ppm&#39;)] for f in file_names: # 以指定的尺寸读取图像数据 image_data = image.load_img(f, target_size=(config.img_rows, config.img_cols))</description>
    </item>
    
    <item>
      <title>python str rbuf</title>
      <link>/language/python/python-str-rbuf/</link>
      <pubDate>Wed, 18 Sep 2019 14:40:33 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-str-rbuf/</guid>
      <description>r/R: 非转义的原始字符串 与普通字符相比，其他相对特殊的字符，其中可能包含转义字符，即那些，反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的</description>
    </item>
    
    <item>
      <title>python class</title>
      <link>/language/python/python-class/</link>
      <pubDate>Wed, 18 Sep 2019 09:20:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-class/</guid>
      <description>正确理解Python中的 @staticmethod@classmethod方法 - 知乎</description>
    </item>
    
    <item>
      <title>python scrapy img</title>
      <link>/language/python/python-scrapy-img/</link>
      <pubDate>Mon, 16 Sep 2019 10:52:11 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-scrapy-img/</guid>
      <description>#coding=utf-8 import requests from bs4 import BeautifulSoup import os import time url=&amp;quot;https://www.tooopen.com/search/logo.aspx?cate=0&amp;amp;type=0&amp;amp;sort=1&amp;amp;level=0&amp;amp;color=0&amp;amp;copyright=0&amp;amp;page=1&amp;quot; ref=&amp;quot;https://www.tooopen.com/search/logo.aspx&amp;quot; #http请求头 referer = { &#39;User-Agent&#39;: &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&#39;, &#39;Referer&#39;: ref } #此请求头破解盗链 #保存地址 path = &#39;./data/&#39; #记录文件 data = &#39;./dl/.data&#39; #读取保存记录 def get_log(file): page</description>
    </item>
    
    <item>
      <title>python cuda</title>
      <link>/language/python/python-cuda/</link>
      <pubDate>Thu, 12 Sep 2019 08:36:05 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-cuda/</guid>
      <description>conda的安装与使用（2019-6-28更新） - 简书 清华大学开源软件镜像站 | Tsinghua... Anaconda 配置镜像 conda config --show 查看配置项 配置镜像(安装一次，镜像也只配置一</description>
    </item>
    
    <item>
      <title>python package module</title>
      <link>/language/python/python-package-module/</link>
      <pubDate>Sat, 23 Mar 2019 09:18:58 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-package-module/</guid>
      <description>Python模块导入与包构建最佳实践 - 简书</description>
    </item>
    
    <item>
      <title>python pytest</title>
      <link>/language/python/python-pytest/</link>
      <pubDate>Fri, 01 Mar 2019 07:14:04 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-pytest/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://www.jianshu.com/p/b825addb4e16 Pytest 学习笔记 记录下 pytest 官方文档的阅读笔记，以便后续参考使用。非完整版，个人理解为主，难免有误，望理解。 安装与快速使用</description>
    </item>
    
    <item>
      <title>python None</title>
      <link>/language/python/python-none/</link>
      <pubDate>Mon, 21 Jan 2019 14:07:41 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-none/</guid>
      <description>Python中对变量是否为None的判断 - 满月青灰 - 博客园 Python中对变量是否为None的判断 三种主要的写法有： 第一种：if X is None; 第二种</description>
    </item>
    
    <item>
      <title>py string nlp</title>
      <link>/language/python/py-string-nlp/</link>
      <pubDate>Thu, 27 Dec 2018 11:08:15 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/py-string-nlp/</guid>
      <description>https://github.com/fighting41love/funNLP 最近需要从文本中抽取结构化信息，用到了很多github上的包，遂整理了一下，后续会不断更新。 很多包非常有趣，值得收藏，满足大家的收集癖！ 如</description>
    </item>
    
    <item>
      <title>py string similary</title>
      <link>/language/python/py-string-similary/</link>
      <pubDate>Thu, 27 Dec 2018 10:56:50 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/py-string-similary/</guid>
      <description>自然语言处理中句子相似度计算的几种方法 luozhouyang/python-string-similarity: 最近因为工作需要，使用Python实现了常用的字符串相似度算法，一共超过十种。列举如下： Levenshtein NormalizedLevenshtein WeightedLevenshtein DamerauLevenshtein OptimalStringAlignment Jarowinkler</description>
    </item>
    
    <item>
      <title>pandas</title>
      <link>/language/python/pandas/</link>
      <pubDate>Sat, 17 Nov 2018 14:39:12 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/pandas/</guid>
      <description>NumPy 与深度学习 pandas删除行删除列，增加行增加列 - GUXH - 博客园 df1 = pd.DataFrame(np.ones((3,4))*0, columns=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) #concat纵向合并 res = pd.concat([df1, df2, df3], axis=0) 安装与导入 通过pip进行安装: pip install pandas</description>
    </item>
    
    <item>
      <title>二叉树遍历</title>
      <link>/language/python/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 17 Nov 2018 11:53:48 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</guid>
      <description>二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有深度遍历和广度遍历， 深度遍历有前序、中序以及后</description>
    </item>
    
    <item>
      <title>Python特殊场景</title>
      <link>/language/python/python%E7%89%B9%E6%AE%8A%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Fri, 28 Jul 2017 13:53:05 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python%E7%89%B9%E6%AE%8A%E5%9C%BA%E6%99%AF/</guid>
      <description>content {:toc} 数组插入 A = [&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;] A.insert(0,&#39;dd&#39;) A.insert(3,&#39;ee&#39;) print A B = [[&#39;aa&#39;,&#39;bb&#39;]] B.insert(0,[&#39;aa&#39;,&#39;bb&#39;]) print B 一维数组转二维 A = [u&#39;123&#39;, u&#39;abc&#39;] B = [ [A[i]] for i in range(len(A))] print B 三目 a,b = 1,2 print a if a &amp;gt; b else b print (a &amp;gt; b and [a] or [b])[0]</description>
    </item>
    
    <item>
      <title>Python时间格式化</title>
      <link>/language/python/python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
      <pubDate>Wed, 12 Apr 2017 13:53:05 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
      <description>content {:toc} time.strftime 可以实现时间格式化 time.strptime 可以实现字符串转时间 &amp;gt;&amp;gt;&amp;gt; import time &amp;gt;&amp;gt;&amp;gt; time.localtime() time.struct_time(tm_year=2017, tm_mon=4, tm_mday=12, tm_hour=13, tm_min=44, tm_sec=57, tm_wday=2, tm_yday=102, tm_isdst=0) &amp;gt;&amp;gt;&amp;gt; print time.strftime(&#39;%Y-%m-%d&#39;,time.localtime()) 2017-04-12 &amp;gt;&amp;gt;&amp;gt; time.strptime(&#39;2017-04-12&#39;,&#39;%Y-%m-%d&#39;) time.struct_time(tm_year=2017, tm_mon=4, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=102, tm_isdst=-1) &amp;gt;&amp;gt;&amp;gt; 格式化符号 %a 英文星期简写 %A 英文星期</description>
    </item>
    
    <item>
      <title>paramiko</title>
      <link>/language/python/python-ssh-paramiko/</link>
      <pubDate>Wed, 25 May 2016 23:59:59 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-ssh-paramiko/</guid>
      <description>content {:toc} 简介 paramiko 是一个可以模拟 SSH 的 Python 包，在登陆成功后可以进行 执行命令、上传文件、下载文件 等操作。 官网 要求 Python 2.6+/3.3+ 不支持文件夹上传，可遍历实现 安装 只尝试</description>
    </item>
    
    <item>
      <title>Python 压缩及解压缩文件</title>
      <link>/language/python/python-%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 12 Nov 2015 01:19:05 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</guid>
      <description>content {:toc} import os import zipfile def zip_dir(dirname,zipfilename): filelist = [] if os.path.isfile(dirname): filelist.append(dirname) else : for root, dirs, files in os.walk(dirname): for name in files: filelist.append(os.path.join(root, name)) zf = zipfile.ZipFile(zipfilename, &amp;quot;w&amp;quot;, zipfile.zlib.DEFLATED) for tar in filelist: arcname = tar[len(dirname):] zf.write(tar,arcname) zf.close() def unzip_file(zipfilename, unziptodir): if not os.path.exists(unziptodir): os.mkdir(unziptodir, 0777) zfobj = zipfile.ZipFile(zipfilename) for name in zfobj.namelist(): name = name.replace(&#39;\\&#39;,&#39;/&#39;) if name.endswith(&#39;/&#39;): os.mkdir(os.path.join(unziptodir, name)) else: ext_filename = os.path.join(unziptodir, name) ext_dir=</description>
    </item>
    
    <item>
      <title>Python 对文件和文件夹的相关操作</title>
      <link>/language/python/python-%E5%AF%B9%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 11 Nov 2015 23:59:05 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-%E5%AF%B9%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</guid>
      <description>content {:toc} Python 对文件、文件夹的操作通常涉及到 os 模块和 shutil 模块。 创建文件 1. os.system(&#39;touch A&#39;) # 创建空文件 A 2. open(&#39;A&#39;,&#39;w&#39;) # 打开 A 文件，如果不存在则创建 创建目录 os.mkdir(&#39;A/B&#39;) # 创建目录 B，A</description>
    </item>
    
    <item>
      <title>Python 去除字符串空格</title>
      <link>/language/python/python-%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Fri, 23 Oct 2015 16:00:05 +0000</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/language/python/python-%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A9%BA%E6%A0%BC/</guid>
      <description>a = &amp;quot; x y z &amp;quot; print a.strip() #return &amp;quot;x y z&amp;quot; print a.lstrip() #return &amp;quot;x y z &amp;quot; print a.rstrip() #return &amp;quot; x y z&amp;quot; print a.replace(&#39; &#39;,&#39;&#39;) #return &amp;quot;xyz&amp;quot;</description>
    </item>
    
  </channel>
</rss>