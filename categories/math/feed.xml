<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on 时光小栈</title>
    <link>/categories/math/</link>
    <description>Recent content in Math on 时光小栈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>rinetd@163.com (rinetd)</managingEditor>
    <webMaster>rinetd@163.com (rinetd)</webMaster>
    <copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 09 Mar 2019 08:48:13 +0800</lastBuildDate>
    
	<atom:link href="/categories/math/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetecode</title>
      <link>/math/leetecode/</link>
      <pubDate>Sat, 09 Mar 2019 08:48:13 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/leetecode/</guid>
      <description>4. 寻找两个有序数组的中位数 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 ,请你找出这两个有序数组的中位数. 并且要求算法的时间复杂度为 O(log(m + n))。你可以</description>
    </item>
    
    <item>
      <title>参数方程</title>
      <link>/math/%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Fri, 25 Jan 2019 11:27:12 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B/</guid>
      <description>高中数学要求知识点：坐标系与参数方程 - 知乎 参数方程与普通方程的区别 普通方程 直接给出曲线上的点(x,y)之间的关系 参数方程 引入第三个参数t间接</description>
    </item>
    
    <item>
      <title>圆锥曲线硬解定理</title>
      <link>/math/%E5%9C%86%E9%94%A5%E6%9B%B2%E7%BA%BF%E7%A1%AC%E8%A7%A3%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 25 Jan 2019 11:27:12 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/%E5%9C%86%E9%94%A5%E6%9B%B2%E7%BA%BF%E7%A1%AC%E8%A7%A3%E5%AE%9A%E7%90%86/</guid>
      <description>【解析几何】暴力之美：圆锥曲线硬解定理 - 知乎</description>
    </item>
    
    <item>
      <title>牛顿迭代法求近似值Newton&#39;s method</title>
      <link>/math/newton/</link>
      <pubDate>Fri, 14 Dec 2018 09:05:42 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/newton/</guid>
      <description>如何不依靠计算器和数学用表，手动给非平方数开根号？ - 知乎 牛顿迭代法求解平方根 - YoungGy的专栏 - CSDN博客 牛顿迭代法(Newton&#39;s</description>
    </item>
    
    <item>
      <title>math as code</title>
      <link>/math/math-as-code/</link>
      <pubDate>Sat, 17 Nov 2018 14:05:18 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/math-as-code/</guid>
      <description>math-as-code 译注：译者英文与数学水平都非常有限，尝试翻译，如有错误请指正。英文原版 在此。 这是一份通过对比数学符号和JavaScript代码来帮助开发者</description>
    </item>
    
    <item>
      <title>keras layer</title>
      <link>/math/keras-layer/</link>
      <pubDate>Sat, 17 Nov 2018 11:51:57 +0800</pubDate>
      <author>rinetd@163.com (rinetd)</author>
      <guid>/math/keras-layer/</guid>
      <description>BatchNormalization layer: 通常在线性向非线性转变时使用,如下： model.add(Dense(100,input_dim=20)) model.add(BatchNormalization()) model.add(Activation(&#39;relu&#39;)) 作用： 能够保证权重的尺度不变，因为BatchNormalization在激活函数前对输入进行了</description>
    </item>
    
  </channel>
</rss>